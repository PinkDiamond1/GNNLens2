{"version":3,"sources":["components/logo2.png","helper/index.tsx","components/DataRuns/GraphView/GraphViewSettingsModal.tsx","actions/index.tsx","constants/index.tsx","container/GraphViewSettingsModalContainer.tsx","components/DataRuns/GraphView/CanvasDrawing.tsx","components/DataRuns/GraphView/ForceDirectedGraphCanvas.tsx","container/ForceDirectedGraphCanvasContainer.tsx","components/DataRuns/GraphView/GraphView.tsx","components/DataRuns/GraphView/index.tsx","container/GraphViewContainer.tsx","service/dataService.tsx","components/DataRuns/ControlPanel/DataSelector.tsx","container/DataSelectorContainer.tsx","components/DataRuns/ControlPanel/NLabelSelector.tsx","container/NLabelSelectorContainer.tsx","components/DataRuns/ControlPanel/EWeightSelector.tsx","container/EWeightSelectorContainer.tsx","components/DataRuns/ControlPanel/index.tsx","components/DataRuns/ControlPanel/ControlPanel.tsx","container/ControlPanelContainer.tsx","components/DataRuns/index.tsx","components/DataRuns/DataRuns.tsx","container/DataRunsContainer.tsx","components/App.tsx","serviceWorker.ts","reducer/index.tsx","index.tsx"],"names":["module","exports","d3_10color","GREEN","RED","getNodeColor","node_label","color_encode","constructGraphIn","graph_obj","srcs","dsts","num_nodes","skew_weight","weight","range_min","GraphViewSettingsModal","props","handleOk","e","console","log","changeGraphViewSettingsModal_visible","handleCancel","handleUnfocusedNodesChange","checked","target","GraphViewState","changeGraphViewState","DisplayUnfocusedNodes","handleOverviewChange","DisplayOverview","state","this","title","visible","GraphViewSettingsModal_visible","onOk","onCancel","footer","key","type","onClick","onChange","React","changeEnableForceDirected","enableForceDirected","connect","dispatch","state_dict","drawRectStroke","context","x","y","width","height","strokeColor","beginPath","strokeStyle","rect","stroke","drawRect","fillColor","opacity","fillStyle","globalAlpha","fillRect","drawCircleStroke","color","radius","lineWidth","arc","Math","PI","drawCircle","alpha","original_globalAlpha","fill","drawOnePie","startAngle","endAngle","moveTo","closePath","drawNodeGlyph","colorlist","inner_radius","outer_radius","enableStroke","outer_arc_encoded_value","enable_alpha_mode","value","length_model","length","step_angle","current_angle","i","start_angle","end_angle","angle","x1","cos","y1","sin","x2","y2","drawLine","linewidth","lineTo","d3","require","ForceDirectedGraphCanvas","global_simulation","saved_transform","refresh_number","current_graph_json","updateTransform","bind","renderCanvas","prevProps","prevState","graph_json","name","transform","legend_configuration","colorLegend","legend_pie_y","top_svg","select","attr","max_text_length","forEach","d","text","legend_color_width","legend_color_height","legend_color_y","legend_color_svg","legend_rect","selectAll","data","enter","append","merge","row_legend_color","g_row_legend_color","exit","remove","UpdateCurrentGraphJson","onNodeClick","nodenum","enabledForceDirected","enable_forceDirected","neighborSet","NeighborSet","configuration","pieLegend","graphWidth","renderLegend","node","getContext","middleCanvas","middle_context","overview_context","eventCanvas","canvasX","canvasY","canvasXRight","canvasYBottom","radius_collision","stop","simulation","forceSimulation","force","forceCenter","forceX","strength","forceY","forceManyBody","forceLink","id","forceCollide","alphaTarget","alphaDecay","calTransform","judgeHoveredFlag","bool","hasOwnProperty","hiddenTooltip","style","zoomIdentity","tempData","event_canvas","mouseCoordinates","order_determine","a","b","hover_cons_a","hover_cons","hover_cons_b","determineSubject","mouse_x","mouse_y","dx","dy","invertX","invertY","newNodeList","nodes","slice","sort","outer_radius_node","handleMouseMove","xy","obj","defaultUpdateFlag","mouse","updateFlag","event_subject","determineEventSubject","selected","target_id","html","neighbor_id","hovered","indexOf","middleCanvasSimulationUpdate","rectInverseTransform","rect_configuration","rect_x","rect_y","rect_width","rect_height","scale","k","pointInverseTransform","point_configuration","point_x","point_y","moveFocalPoint","ori_point","ori_inverse_point","overview_point","overview_inverse_point","new_x","new_y","simulationUpdate","renderContext","links","filter","source","highlight","node_inner_radius","node_radius","node_outer_radius","node_outer_arc_encoded_value","node_weight","node_outer_arc_radius","radius_gap","save","clearRect","translate","restore","graph_bounding_box","minx","miny","maxx","maxy","flag","glyph_outer_radius","margin","calculateGraphBoundingBox","canvasWidth","canvasHeight","bounding_box","leftbound","upperbound","occupyHeight","occupyWidth","xscale","yscale","min","calculateTransform","overview_inverse_rect","overview_bounding_box","view_configuration","rectTransform","rightbound","lowerbound","inverse_transform_rect","transformed_leftbound","transformed_upperbound","transformed_rightbound","transformed_lowerbound","clipwidth","clipheight","rectInverseTransformAndClip","judgeHovered","real_color","on","event","defaultPrevented","call","zoom","scaleExtent","className","xmlns","Option","Select","GraphView","prevGraphJson","onEnableForceDirected","onExtendedModeChange","onChangeSelectInspectNode","node_id","showSource","changeSelectInspectNode","changeShowSource","changeExtendedMode","color_mode","num_types","label","push","graph_object","model_nlabels","model_eweights","model_nweights","NLabelList","eweightList","selectedNodeIdList","select_inspect_node","graph_name","ew","selectStr","join","NLabelName","common","bundle_id","graph_in","graph_target","nlabels","source_list","senders","target_list","receivers","node_num","edge_num","eweight","enablePrevGraphLayout","nodes_json","links_json","links_color_json","init_color","edge_weighted","current_eweights","index","nlabel","node_object","Object","keys","eweights","link_color","edge_weight","getColorLegend","num_nlabel_types","subg_name","subgs","selectedEdgeIdList","eids","selectedNodeOrder","selectedEdgeOrder","new_selectedNodeIdList","nodeId","concat","Array","from","Set","new_node_id","parseInt","subgList","extendedMode","specificNodeIdList","nowreceiver","constructNeighborSet","ForceDirectedWidth","ForceDirectedHeight","constructExtendedSelectedNodeIdList","constructNodeGraphJson","constructEdgeGraphJson","extendedOptions","subg_type_id","overflowX","float","max","size","GraphViewSettingsModalContainer","placeholder","disabled","map","showGraphViewSettingModal","SettingOutlined","selectedNodeLength","totalNodeLength","str","toFixed","getNodeStatisticStr","ForceDirectedGraphCanvasContainer","selectedMessagePassingNodeIdList","changeSpecificNodeIdList","changePrevGraphJson","URL","window","location","origin","axiosInstance1","axios","create","baseURL","headers","URL2","axiosInstance","getDatasetList","url","get","res","status","getModelList","dataset_id","params","getSubgraphList","getGraphInfo","getModelInfo","model_id","getSubgraphInfo","subgraph_id","DataSelector","onDatasetSelectorChange","initDatasetList","datasetList_package","changeDataset","clearIdInfo","disabledDatasetSelector","datasetList","undefined","NLabelSelector","onNLabelSelectorChange","changeNLabel","nlabel_options","disabledNLabelSelector","nlabel_options_indexed","nlabel_object","mode","allowClear","defaultValue","EWeightSelector","onEWeightSelectorChange","changeEWeight","eweight_options","disabledEWeightSelector","eweight_options_indexed","eweight_object","ControlPanel","DataSelectorContainer","NLabelSelectorContainer","generateNLabelSelector","EWeightSelectorContainer","generateEWeightSelector","DataRuns","GraphViewRef","ControlPanelRef","onResizeStop","getLayoutConfigWithName","getCurrentLayoutConfig","model","graph","model_list","subg_list","layout_config","screenWidth","screenHeight","setState","getWholeLayoutConfig","innerHeight","innerWidth","m_to_eweights","head","mname","mlist","m_to_nlabels","model_info","mdata","slist","n_to_subgs","subg_info","sdata","current","offsetWidth","offsetHeight","getGraphBundledData","getModelData","getSubgraphData","contentHeight","contentWidth","layout","max_row_num","floor","w","h","static","screenwidth","cols","rowHeight","onLayoutChange","ref","GraphViewContainer","generateGraphView","ControlPanelContainer","generateControlPanel","generateWholeView","Content","Layout","Header","App","ContentRef","createRef","onResize","updateLayoutState","contentLayout","getLayoutConfig","addEventListener","src","logo","alt-text","DataRunsContainer","Component","Boolean","hostname","match","initial_state","refreshnumber","filters","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,mC,8aCErCC,EAAa,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAoBjHC,EAAkB,CACpB,UACA,UACA,WAsBEC,EAAgB,CAAC,WA2FjBC,EAAe,SAAEC,GAA8C,IAA5BC,EAA2B,uDAAL,EAC3D,OAAoB,IAAjBA,GAAuC,IAAjBA,GAAuC,IAAjBA,EACpCL,EAAWI,GACI,IAAjBC,EACFD,EACQH,EAAM,GAENC,EAAI,QAJb,GAaV,SAASI,EAAiBC,GAItB,MAAO,CACH,QAJUA,EAAUC,KAKpB,UAJYD,EAAUE,KAKtB,UAJYF,EAAUG,WAkK9B,SAASC,EAAYC,GAAgD,IAApCC,EAAmC,uDAArB,GAE3C,MAAsB,IAAdD,EAAS,GAAWC,E,8CCvTXC,E,kDACjB,WAAYC,GAAe,IAAD,8BACtB,cAAMA,IAmBVC,SAAW,SAACC,GACRC,QAAQC,IAAIF,GACZ,EAAKF,MAAMK,sCAAqC,IAtB1B,EAyB1BC,aAAe,SAACJ,GACZC,QAAQC,IAAIF,GACZ,EAAKF,MAAMK,sCAAqC,IA3B1B,EA6B1BE,2BAA6B,SAACL,GAC5B,IAAIM,EAAUN,EAAEO,OAAOD,QACnBE,EAAiB,EAAKV,MAAMU,eAChC,EAAKV,MAAMW,qBAAX,2BACKD,GADL,IAEEE,sBAAuBJ,MAlCD,EAqC1BK,qBAAuB,SAACX,GACtB,IAAIM,EAAUN,EAAEO,OAAOD,QACnBE,EAAiB,EAAKV,MAAMU,eAChC,EAAKV,MAAMW,qBAAX,2BACKD,GADL,IAEEI,gBAAiBN,MAvCjB,EAAKO,MAAQ,GAHS,E,0CA6C1B,WASI,IAAIL,EAAiBM,KAAKhB,MAAMU,eAChC,OACA,gBAAC,IAAD,CACIO,MAAM,sBACNC,QAASF,KAAKhB,MAAMmB,+BACpBC,KAAMJ,KAAKf,SACXoB,SAAUL,KAAKV,aACfgB,OAAQ,CACJ,gBAAC,IAAD,CAAQC,IAAI,KAAKC,KAAK,UAAUC,QAAST,KAAKf,UAA9C,QANR,qBAaM,2BACE,gBAAC,IAAD,CAAUO,QAASE,EAAeE,sBAAuBc,SAAUV,KAAKT,4BAAxE,4BACA,2BACA,gBAAC,IAAD,CAAUC,QAASE,EAAeI,gBAAiBY,SAAUV,KAAKH,sBAAlE,2B,GAzEoCc,aCSvCtB,EAAuC,SAACa,GAAD,MAAqB,CACrEM,KCegD,uCDdhDL,+BAAgCD,IAMvBU,EAA4B,SAACC,GAAD,MAA6B,CAClEL,KCawC,+BDZxCK,oBAAqBA,IEbVC,eAVS,SAACf,GAAD,MAAwB,CAC5CI,+BAAgCJ,EAAMI,+BACtCT,eAAgBK,EAAML,mBAGC,SAACqB,GAAD,MAAyB,CAChD1B,qCAAsC,SAACa,GAAD,OAAqBa,EAAS1B,EAAqCa,KACzGP,qBAAsB,SAACqB,GAAD,OAAoBD,EFUV,SAACC,GAAD,MAAoB,CACpDR,KCciC,wBDbjCd,eAAgBsB,GEZmCrB,CAAqBqB,QAG7DF,CAA6C/B,G,OCb5D,SAASkC,EAAeC,EAAaC,EAAOC,EAAOC,EAAWC,GAAoC,IAAxBC,EAAuB,uDAAP,OACtFL,EAAQM,YACRN,EAAQO,YAAcF,EACtBL,EAAQQ,KAAKP,EAAGC,EAAGC,EAAOC,GAC1BJ,EAAQS,SAEZ,SAASC,EAASV,EAAaC,EAAOC,EAAOC,EAAWC,GAAmD,IAAvCO,EAAsC,uDAAxB,OAAQC,EAAgB,uDAAJ,GAClGZ,EAAQa,UAAYF,EACpBX,EAAQc,YAAcF,EACtBZ,EAAQe,SAASd,EAAGC,EAAGC,EAAOC,GAC9BJ,EAAQc,YAAc,EAE1B,SAASE,EAAiBhB,EAAaiB,EAAWC,EAAYjB,EAAOC,EAAOiB,GACxEnB,EAAQmB,UAAYA,EACpBnB,EAAQO,YAAcU,EACtBjB,EAAQM,YACRN,EAAQoB,IAAInB,EAAGC,EAAGgB,EAAQ,EAAG,EAAIG,KAAKC,IAAI,GAC1CtB,EAAQS,SAGZ,SAASc,EAAWvB,EAAaiB,EAAWC,EAAYjB,EAAOC,GAAoB,IAAbsB,EAAY,uDAAF,EACxEC,EAAuBzB,EAAQc,YACnCd,EAAQc,YAAcU,EACtBxB,EAAQM,YACRN,EAAQoB,IAAInB,EAAGC,EAAGgB,EAAQ,EAAG,EAAIG,KAAKC,IAAI,GAC1CtB,EAAQa,UAAYI,EACpBjB,EAAQ0B,OACR1B,EAAQc,YAAcW,EAI1B,SAASE,EAAW3B,EAAaiB,EAAWC,EAAYjB,EAAOC,EAAO0B,EAAgBC,GAA2B,IAAbL,EAAY,uDAAF,EACtGC,EAAuBzB,EAAQc,YACnCd,EAAQc,YAAcU,EACtBxB,EAAQM,YACRN,EAAQ8B,OAAO7B,EAAEC,GACjBF,EAAQoB,IAAInB,EAAGC,EAAGgB,EAAQU,EAAYC,GACtC7B,EAAQa,UAAYI,EACpBjB,EAAQ+B,YACR/B,EAAQ0B,OACR1B,EAAQc,YAAcW,EAiJ1B,SAASO,EAAchC,EAAaiC,EAAeC,EAAkBhB,EAAYiB,EAAkBlC,EAAOC,GACO,IAA7GkC,EAA4G,wDAAhFC,EAAgF,uDAApD,GAA6BC,IAAuB,4DACxGC,EAAQF,EAETE,EAAM,EAAGA,EAAQ,EACZA,EAAM,IAAGA,EAAQ,GACzB,IAAIf,EAAQ,EACTc,IACCd,EAAQe,GASZ,IAAIC,EAAeP,EAAUQ,OAAS,EACtC,GAAGD,EAAe,EAAE,CAChBjB,EAAWvB,EAAS,OAAQmC,EAAclC,EAAGC,EAAGsB,GAC7CY,GACCpB,EAAiBhB,EAAS,OAAQmC,EAAclC,EAAGC,EAAG,GAI1D,IAFA,IAAIwC,EAAa,IAAMF,EACnBG,GAAiB,GAAKD,EAAa,EAC/BE,EAAI,EAAGA,EAAEX,EAAUQ,OAAQG,IAAI,CACnC,IAAIC,EAAcF,EACdG,EAAYD,EAAcH,EAC9Bf,EAAW3B,EAASiC,EAAUW,GAAIT,EAAclC,EAAGC,EAAI2C,EAAa,IAAIxB,KAAKC,GAAKwB,EAAW,IAAIzB,KAAKC,GAAIE,GAC1GmB,EAAgBG,EAEpB,GAAGN,EAAe,EAAE,CAChBG,GAAiB,GAAKD,EAAa,EACnC,IAAI,IAAIE,EAAI,EAAGA,EAAEX,EAAUQ,OAAQG,IAAI,CACnC,IAAIG,EAASJ,EAAe,IAAItB,KAAKC,GACjC0B,EAAK/C,EAAIiB,EAAOG,KAAK4B,IAAIF,GACzBG,EAAKhD,EAAIgB,EAAOG,KAAK8B,IAAIJ,GACzBK,EAAKnD,EAAIkC,EAAad,KAAK4B,IAAIF,GAC/BM,EAAKnD,EAAIiC,EAAad,KAAK8B,IAAIJ,GAEnCO,EAAStD,EAAS,OAAQgD,EAAIE,EAAIE,EAAIC,EAAInC,EAAOgB,EAAcV,GAC/DmB,GAAgCD,GAGxCnB,EAAWvB,EAAS,OAAQkB,EAAQjB,EAAGC,EAAGsB,GAC1CD,EAAWvB,EAASiC,EAAU,GAAIC,EAAcjC,EAAGC,EAAGsB,QAGtDD,EAAWvB,EAASiC,EAAU,GAAIE,EAAclC,EAAGC,EAAGsB,GACnDY,GACCpB,EAAiBhB,EAAS,OAAQmC,EAAclC,EAAGC,EAAG,GAalE,SAASoD,EAAStD,EAAaiB,EAAW+B,EAAQE,EAAQE,EAAQC,GAA0C,IAAlCE,EAAiC,uDAAnB,KAAM5F,EAAa,uDAAF,EACjG8D,EAAuBzB,EAAQc,YAC/ByB,EAAQ5E,EACT4E,EAAM,EAAGA,EAAQ,EACZA,EAAM,IAAGA,EAAQ,GACzBvC,EAAQc,YAAcyB,EACtBvC,EAAQO,YAAcU,EACnBsC,IACCvD,EAAQmB,UAAYoC,GAExBvD,EAAQM,YACRN,EAAQ8B,OAAOkB,EAAIE,GACnBlD,EAAQwD,OAAOJ,EAAIC,GACnBrD,EAAQS,SACRT,EAAQc,YAAcW,ECrQ1B,IAAMgC,EAAKC,EAAQ,KAaEC,E,kDAKjB,WAAY7F,GAAe,IAAD,8BACtB,cAAMA,IALH8F,kBAAwB,KAIL,EAHnBC,gBAAsB,KAGH,EAFnBC,eAAiB,EAEE,EADnBC,mBAAyB,KAG5B,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKpF,MAAQ,GAHS,E,qDAO1B,WACIC,KAAKoF,iB,gCAGT,SAAmBC,EAAkBC,GAC9BD,EAAUE,WAAWC,OAASxF,KAAKhB,MAAMuG,WAAWC,MAAQH,EAAUhE,QAAUrB,KAAKhB,MAAMqC,OAASgE,EAAU3F,iBAAmBM,KAAKhB,MAAMU,gBAC3IM,KAAKoF,iB,6BAGZ,SAAuBK,GACnBzF,KAAK+E,gBAAkBU,I,0BAG3B,SAAoBC,GACjB,IAAIrE,EAAQqE,EAAoB,MAC5BpE,EAASoE,EAAoB,OAC7BC,EAAcD,EAAoB,YAElCE,EAAetE,EAAS,GAAK,IAC7BuE,EAAUlB,EAAGmB,OAAO,yBACfA,OAAO,aACPC,KAAK,QAAS1E,GACd0E,KAAK,SAAUzE,GAEpB0E,EAAkB,EACtBL,EAAYM,SAAQ,SAACC,GACjB,IAAIC,EAAO,GAAKD,EAAEC,KACfA,EAAKxC,OAAOqC,IACXA,EAAkBG,EAAKxC,WAI/B,IAAIyC,EAAqC,EAAhBJ,EAAkB,GAEvCK,EAAyC,GAAnBV,EAAYhC,OAClC2C,EAAiBV,EAAeS,EAAsB,GACtDE,EAAmBV,EAAQC,OAAO,6BACjCC,KAAK,QAASK,GACdL,KAAK,SAAUM,GACfN,KAAK,YAAa,gBAAgCO,EAAe,KAClEE,EAAcD,EAAiBE,UAAU,QAAQC,KAAK,CAAC,IACnCF,EAAYG,QAAQC,OAAO,QAEjCC,MAAML,GACnBT,KAAK,IAAK,GACVA,KAAK,IAAK,GACVA,KAAK,QAASK,GACdL,KAAK,SAAUM,GACfN,KAAK,OAAQ,QACbA,KAAK,UAAW,IAChBA,KAAK,SAAU,QACfA,KAAK,eAAgB,GACrBA,KAAK,KAAK,GACVA,KAAK,KAAK,GACf,IAAIe,EAAmBP,EAAiBE,UAAU,sBACzBC,KAAKf,GAAa,SAASO,EAAMpC,GAC9B,OAAOoC,EAAEC,KAAK,IAAIrC,EAAE,IAAIoC,EAAE/D,SAElD4E,EAAqBD,EAAiBH,QAAQC,OAAO,KACpCb,KAAK,QAAQ,oBACbA,KAAK,aAAa,SAASG,EAAMpC,GAC9B,MAAO,iBAAiB,GAAK,GAAFA,GAAM,OAErDiD,EAAmBH,OAAO,UACTb,KAAK,IAAK,GACVA,KAAK,QAAQ,SAASG,GACnB,OAAOA,EAAE/D,SAG7B4E,EAAmBH,OAAO,QACTb,KAAK,IAAK,IACVA,KAAK,IAAK,GACVI,MAAK,SAASD,GACX,OAAOA,EAAEC,QAG7BW,EAAiBE,OAAOC,W,0BAqG/B,WAGGjH,KAAKhB,MAAMkI,uBAAuBlH,KAAKhB,MAAMuG,YAC7C,IAAI4B,EAAcnH,KAAKhB,MAAMmI,YACzBC,EAAUpH,KAAKhB,MAAMuG,WAAW6B,QAChCC,EAAuBrH,KAAKhB,MAAMuG,WAAW+B,qBAC7CC,EAAcvH,KAAKhB,MAAMuG,WAAWiC,YACpC7B,EAAc3F,KAAKhB,MAAMuG,WAAWI,YAEpC8B,GADYzH,KAAKhB,MAAMuG,WAAWmC,UAClB,CAChB,SAAY,IACZ,OAAS,GACT,WAAa,EACb,WAAa,EACb,MAAS1H,KAAKhB,MAAMqC,MACpB,OAAUrB,KAAKhB,MAAMsC,SAErB5B,EAAiBM,KAAKhB,MAAMU,eAC5BE,EAAwBF,EAAeE,sBACvCE,EAAkBJ,EAAeI,gBAElCsH,GAAW,MACVK,EAAgB,CACZ,SAAY,GACZ,OAAS,EACT,WAAa,EACb,WAAa,EACb,MAASzH,KAAKhB,MAAMqC,MACpB,OAAUrB,KAAKhB,MAAMsC,SAI7B,IAAID,EAAQoG,EAAa,MACrBnG,EAASmG,EAAa,OACtBrF,EAASqF,EAAa,OAEtBE,EAAc3H,KAAKhB,MAAMqC,MACzBqE,EAA2B,CAC3B,MAAQrE,EACR,OAASC,EACT,YAAcqE,GAGlB3F,KAAK4H,aAAalC,GAUlB,IAKIxE,EALcyD,EAAGmB,OAAO,yBAAyBA,OAAO,WAC3DC,KAAK,QAAS4B,EAAa,MAC3B5B,KAAK,SAAUzE,EAAS,MACxBuG,OAEyBC,WAAW,MAGjCC,EAAepD,EAAGmB,OAAO,yBAAyBA,OAAO,WAC5DC,KAAK,QAAS4B,EAAa,MAC3B5B,KAAK,SAAUzE,EAAS,MACxBuG,OACGG,EAAiBD,EAAaD,WAAW,MAOzCG,EAJiBtD,EAAGmB,OAAO,yBAAyBA,OAAO,aAC9DC,KAAK,QAAS4B,EAAa,MAC3B5B,KAAK,SAAUzE,EAAS,MACxBuG,OACqCC,WAAW,MAG7CI,EAAcvD,EAAGmB,OAAO,yBAAyBA,OAAO,UAC3DC,KAAK,QAAS4B,EAAa,MAC3B5B,KAAK,SAAUzE,EAAS,MACxBuG,OAOGM,EAAUR,EAHI,IAEL,GAETS,EAAU9G,EAHK,IACN,GAGT+G,EAAeF,EALD,IAMdG,EAAgBF,EALD,IAMfG,EAA0B,EAAPnG,EAtDN,GAsD4B,EAG1CpC,KAAK8E,oBACJ9E,KAAK8E,kBAAkB0D,cAChBxI,KAAK8E,mBAEhB,IAAI2D,EAAa9D,EAAG+D,kBACLC,MAAM,SAAUhE,EAAGiE,YAAYjB,EAAa,EAAGrG,EAAS,IACxDqH,MAAM,IAAKhE,EAAGkE,OAAOlB,EAAa,GAAGmB,SAAS,KAC9CH,MAAM,IAAKhE,EAAGoE,OAAOzH,EAAS,GAAGwH,SAAS,KAC1CH,MAAM,SAAUhE,EAAGqE,gBAAgBF,UAAU,KAC7CH,MAAM,OAAQhE,EAAGsE,YAAYH,SAAS,GAAGI,IAAG,SAAShD,GAAS,OAAOA,EAAEgD,OACvEP,MAAM,UAAWhE,EAAGwE,eAAe/G,QAAO,SAAC8D,GAAD,OAAWqC,MACrDa,YAAY,GACZC,WAAW,KAE1BrJ,KAAK8E,kBAAoB2D,EAEzB,IAIIhD,EAJAP,EAAkBlF,KAAKkF,gBAKvBoE,EAAiB,CACjB,EAAI,EACJ,EAAI,EACJ,EAAI,GAUR,SAASC,EAAiBrD,EAAOsD,GAC7B,OAAItD,EAAEuD,eAAe,aAA6B,IAAfvD,EAAC,SAOpB,IAATsD,GANS,IAATA,EAeX,SAASE,IACL/E,EAAGmB,OAAO,yBAAyBA,OAAO,YAAY6D,MAAM,UAAW,GAzBvElE,EADDzF,KAAK+E,gBACO/E,KAAK+E,gBAEJJ,EAAGiF,aA4BnB,IAAIC,EAAW7J,KAAKhB,MAAMuG,WAGtBuE,EAAe5B,EACf6B,EAAuB,KA2B3B,SAASC,EAAgBC,EAAMC,GAC3B,IAAIC,EAAeF,EAAER,eAAe,cAAcQ,EAAEG,WAAW,EAC3DC,EAAeH,EAAET,eAAe,cAAcS,EAAEE,WAAW,EAG/D,OAF0BH,EAAE7H,OAAO+H,EAAa,EACtBD,EAAE9H,OAAOiI,EAAa,GACA,EAAE,EAGtD,SAASC,EAAiBC,EAAeC,GACrC,IAAI1G,EAGJ2G,EACAC,EAHAvJ,EAAIsE,EAAUkF,QAAQJ,GACtBnJ,EAAIqE,EAAUmF,QAAQJ,GAGlBK,EAAchB,EAASiB,MAAMC,QAAQC,KAAKhB,GAC9C,IAAKlG,EAAI+G,EAAYlH,OAAS,EAAGG,GAAK,IAAKA,EAAG,CAC1C,IAAI+D,EAAOgD,EAAY/G,GACvB,GAAIlE,GAA0BiI,EAAI,UAAlC,CAGA4C,EAAKtJ,EAAI0G,EAAK1G,EACduJ,EAAKtJ,EAAIyG,EAAKzG,EACd,IAAIgJ,EAAavC,EAAK4B,eAAe,cAAc5B,EAAKuC,WAAW,EAC/Da,EAAkC,EAAdpD,EAAKzF,OAAagI,EAC1C,GAAIK,EAAKA,EAAKC,EAAKA,EAAKO,EAAoBA,EACxC,OAAOpD,GAGf,OAAO,KAkBX,SAASqD,IAAyE,IAC1EC,EAD2BC,EAA8C,uDAAtC,KAAMC,EAAgC,wDAE1ED,EACCD,EAAKpB,GAELoB,EAAKxG,EAAG2G,MAAMtL,MACd+J,EAAmBoB,GAGvB,IAAII,EAAaF,EAEjB,GAAGF,EAAG,CACF,IAAIK,EAAgBC,EAAsBN,EAAG,GAAIA,EAAG,IAChDO,EAAWpB,EAAiBa,EAAG,GAAGA,EAAG,IACzC,GAAmB,gBAAhBK,GAA+BE,EAAS,CACvCH,GAAa,EACb,IAAII,EAAYD,EAASxC,GAEzBvE,EAAGmB,OAAO,yBAAyBA,OAAO,YACrC6D,MAAM,UAAW,IACjBA,MAAM,MAAQwB,EAAG,GAAK,EAAK,MAC3BxB,MAAM,OAASwB,EAAG,GAAK,EAAK,MAC5BS,KAAKD,GAEV,IAAIE,EAActE,EAAYmE,EAASxC,IACvCW,EAASiB,MAAM7E,SAAQ,SAACC,GACjByF,IAAczF,EAAEgD,IACfhD,EAAE4F,SAAU,EACZ5F,EAAEkE,WAAa,GACTyB,EAAYE,QAAQ7F,EAAEgD,KAAK,GACjChD,EAAE4F,SAAU,EACZ5F,EAAEkE,WAAa,IAEflE,EAAE4F,SAAU,EACZ5F,EAAEkE,WAAa,WAKvBP,EAASiB,MAAM7E,SAAQ,SAACC,GACpBqF,EAAaA,GAAchC,EAAiBrD,GAAG,GAC/CA,EAAE4F,SAAU,EACZ5F,EAAEkE,WAAa,KAEnBV,SAGJG,EAASiB,MAAM7E,SAAQ,SAACC,GACpBqF,EAAaA,GAAchC,EAAiBrD,GAAG,GAC/CA,EAAE4F,SAAU,EACZ5F,EAAEkE,WAAa,KAEnBV,IAGD6B,GACCS,IAqBR,SAASP,EAAsBlB,EAAgBC,GAC3C,OAAGD,GAAWpC,GAAWoC,GAAUlC,GAC5BmC,GAAWpC,GAAWoC,GAAUlC,GAAiBxI,EACzC,iBAEA,cAsGnB,SAASmM,EAAqBC,EAAwBzG,GAClD,IAAI0G,EAASD,EAAkB,EAC3BE,EAASF,EAAkB,EAC3BG,EAAaH,EAAkB,MAC/BI,EAAcJ,EAAkB,OAChCzB,GAAMhF,EAAUtE,EAChBuJ,GAAMjF,EAAUrE,EAChBmL,EAAQ,EAAE9G,EAAU+G,EAKxB,MAAO,CACH,GALKL,EAAS1B,GAAM8B,EAMpB,GALKH,EAAS1B,GAAM6B,EAMpB,MALSF,EAAcE,EAMvB,OALUD,EAAeC,GAUjC,SAASE,EAAsBC,EAAyBjH,GACpD,IAAIkH,EAAUD,EAAmB,EAC7BE,EAAUF,EAAmB,EAC7BjC,GAAMhF,EAAUtE,EAChBuJ,GAAMjF,EAAUrE,EAChBmL,EAAQ,EAAE9G,EAAU+G,EAGxB,MAAO,CACH,GAHKG,EAAUlC,GAAM8B,EAIrB,GAHKK,EAAUlC,GAAM6B,GAQ7B,SAASM,EAAetC,EAAgBC,GACpC,IAAIsC,EAAY,CACZ,EAAInF,EAAa,EACjB,EAAIrG,EAAS,GAEbyL,EAAoBN,EAAsBK,EAAWrH,GAErDuH,EAAiB,CACjB,EAAKzC,EACL,EAAKC,GAELyC,EAAyBR,EAAsBO,EAAgB1D,GAC/D4D,IAAUD,EAAsB,EAAQF,EAAiB,GAAOtH,EAAU+G,EAAI/G,EAAUtE,EACxFgM,IAAUF,EAAsB,EAAQF,EAAiB,GAAOtH,EAAU+G,EAAI/G,EAAUrE,EAC5FjC,QAAQC,IAAI,CACR0N,YAAWC,oBAAmBC,iBAAgBC,yBAAwBC,QAAOC,UAEjF1H,EAAUtE,EAAI+L,EACdzH,EAAUrE,EAAI+L,EACdjI,EAAgBO,GAChB2H,IA4EJ,SAASC,EAAcnM,GAIhBtB,IACCiK,EAASyD,MAAMC,QAAO,SAACrH,GACnB,OAAGA,EAAEsH,OAAOC,YAAavH,EAAEzG,OAAOgO,aAKnCxH,SAAQ,SAASC,GAEhB1B,EAAStD,EAASgF,EAAE/D,MAAO+D,EAAEsH,OAAOrM,EAAG+E,EAAEsH,OAAOpM,EAAG8E,EAAEzG,OAAO0B,EAAG+E,EAAEzG,OAAO2B,EAAG,KAAM8E,EAAErH,WAIvFgL,EAASiB,MAAMyC,QAAO,SAACrH,GACnB,OAAQA,EAAC,aAEXD,SAAQ,SAASC,EAAOpC,GAGtB,IAAI4J,EAAoBxH,EAAE9D,OAlhBrB,GAmhBDuL,EAAczH,EAAE9D,OAChBwL,EAA+B,EAAX1H,EAAE9D,OACtByL,EAA+B3H,EAAE4H,YACjCC,EAAwBH,EAAoBI,IAChD9K,EAAchC,EAASgF,EAAE/D,MAAOuL,EAC5BC,EAAaC,EAAmB1H,EAAE/E,EAAG+E,EAAE9E,GAAG,EAC1CyM,EAA8BE,OAK1ClE,EAASyD,MAAMC,QAAO,SAACrH,GACnB,SAAGA,EAAEsH,OAAOC,YAAavH,EAAEzG,OAAOgO,cAKnCxH,SAAQ,SAASC,GAChB1B,EAAStD,EAASgF,EAAE/D,MAAO+D,EAAEsH,OAAOrM,EAAG+E,EAAEsH,OAAOpM,EAAG8E,EAAEzG,OAAO0B,EAAG+E,EAAEzG,OAAO2B,EAAG,EAAI8E,EAAErH,OAAQqH,EAAErH,WAE/FgL,EAASiB,MAAMyC,QAAO,SAACrH,GACnB,OAAOA,EAAC,aAETD,SAAQ,SAASC,EAAMpC,GACtB,IAAI4J,EAAoBxH,EAAE9D,OA3iBjB,GA4iBLuL,EAAczH,EAAE9D,OAChBwL,EAA+B,EAAX1H,EAAE9D,OACtByL,EAA+B3H,EAAE4H,YACjCC,EAAwBH,EAAoBI,IAChD9K,EAAchC,EAASgF,EAAE/D,MAAOuL,EAC5BC,EAAaC,EAAmB1H,EAAE/E,EAAG+E,EAAE9E,GAAG,EAC1CyM,EAA8BE,MAM1C,SAASX,IAWL,GAVAlM,EAAQ+M,OACR/M,EAAQgN,UAAU,EAAG,EAAGvG,EAAYrG,GACpCJ,EAAQiN,UAAU1I,EAAUtE,EAAGsE,EAAUrE,GACzCF,EAAQqL,MAAM9G,EAAU+G,EAAG/G,EAAU+G,GACrCa,EAAcnM,GACdA,EAAQkN,UAKLtO,EAAgB,CACf,IAAIuO,EAlRZ,WAGI,IAAIC,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAC7BC,GAAO,EAmCX,OAlCA7E,EAASiB,MAAM7E,SAAQ,SAASC,GAC5B,GAAGtG,IAA2BA,GAAyBsG,EAAEuH,UAAW,CAChE,IAAItM,EAAI+E,EAAE/E,EACNC,EAAI8E,EAAE9E,EACNsN,GAOGJ,EAAOnN,IACNmN,EAAOnN,GAERqN,EAAOrN,IACNqN,EAAOrN,GAERoN,EAAOnN,IACNmN,EAAOnN,GAERqN,EAAOrN,IACNqN,EAAOrN,KAhBXkN,EAAOnN,EACPoN,EAAOnN,EACPoN,EAAOrN,EACPsN,EAAOrN,EACPsN,GAAO,OAyBZ,CACH,UANYJ,EAFS,EACZ,GAQT,WANaC,EAHQ,EACZ,GAST,YALcC,EAAOF,EAAOK,GAAuBC,GAMnD,aALeH,EAAOF,EAAOI,GAAuBC,IA4O3BC,GACzBvF,EAnGR,SAA4BnB,EAAeC,EAAe0G,EAAoBC,EAAqBC,GAC/F,IAAIC,EAAYD,EAAY,UACxBE,EAAaF,EAAY,WACzBG,EAAeH,EAAY,aAC3BI,EAAcJ,EAAY,YAC1BK,EAASP,EAAcM,EACvBE,EAASP,EAAeI,EACxB5C,EAAQhK,KAAKgN,IAAIF,EAAQC,GAU7B,MANmB,CACf,EAAK/C,EACL,GALMuC,EAAcM,EAAc7C,GAAO,EAAI0C,EAAU1C,EAAQpE,EAM/D,GALM4G,EAAeI,EAAe5C,GAAO,EAAI2C,EAAW3C,EAAQnE,GA0FnDoH,CAAmBrH,EAASC,EAthBjC,IACC,IAqhBoEiG,GAC/E,IAAInC,EAAqB,CACrB,EAAI,EAAG,EAAI,EAAG,MAAQvE,EAAY,OAASrG,GAQ3CmO,EAAwBxD,EANC,CACzB,EAAI9D,EACJ,EAAIC,EACJ,MA7hBM,IA8hBN,OA7hBO,KA+hB8DkB,GACrEoG,EAAwB,CACxB,UAAYD,EAAqB,EACjC,WAAaA,EAAqB,EAClC,YAAcA,EAAqB,MACnC,aAAeA,EAAqB,QAGpCE,EArPZ,SAAuBzD,EAAwBzG,GAC3C,IAAI0G,EAASD,EAAkB,EAC3BE,EAASF,EAAkB,EAC3BG,EAAaH,EAAkB,MAC/BI,EAAcJ,EAAkB,OAChCzB,EAAKhF,EAAUtE,EACfuJ,EAAKjF,EAAUrE,EACfmL,EAAQ9G,EAAU+G,EAKtB,MAAO,CACH,EALKL,EAAOI,EAAQ9B,EAMpB,EALK2B,EAAOG,EAAQ7B,EAMpB,MALS2B,EAAcE,EAMvB,OALUD,EAAeC,GA0OAqD,CApKjC,SAAqC1D,EAAuBzG,EAAeuJ,GACvE,IAAIC,EAAYD,EAAY,UACxBE,EAAaF,EAAY,WACzBG,EAAeH,EAAY,aAC3BI,EAAcJ,EAAY,YAC1Ba,EAAaZ,EAAYG,EACzBU,EAAaZ,EAAaC,EAC1BY,EAAyB9D,EAAqBC,EAAoBzG,GAClEuK,EAAwBD,EAAsB,EAC9CE,EAAyBF,EAAsB,EAC/CG,EAAyBH,EAAsB,EAAMA,EAAsB,MAC3EI,EAAyBJ,EAAsB,EAAMA,EAAsB,OAE5EC,EAAsBf,IACrBe,EAAwBf,GAEzBiB,EAAuBL,IACtBK,EAAyBL,GAE1BI,EAAuBf,IACtBe,EAAyBf,GAE1BiB,EAAuBL,IACtBK,EAAyBL,GAE7B,IAEIM,EAAYF,EAAyBF,EACrCK,EAAaF,EAAyBF,EAW1C,OAVGG,EAAY,EACXA,EAAY,EACPA,EAAUhB,IACfgB,EAAYhB,GAEbiB,EAAW,EACVA,EAAW,EACNA,EAAWlB,IAChBkB,EAAalB,GAEV,CACH,EAfQa,EAgBR,EAfQC,EAgBR,MAAQG,EACR,OAASC,GAwHwBC,CAA4BpE,EAAoBzG,EAAWiK,GACzBpG,GAEnErB,EAAiBgG,OACjBhG,EAAiBiG,UAAU,EAAG,EAAGvG,EAAYrG,GAC7CL,EAAegH,EAAkBE,EAASC,EA5iBhC,IACC,KA4iBXxG,EAASqG,EAAkBE,EAASC,EA7iB1B,IACC,KA8iBXH,EAAiBkG,UAAU7E,EAAanI,EAAGmI,EAAalI,GACxD6G,EAAiBsE,MAAMjD,EAAakD,EAAGlD,EAAakD,GACpDa,EAAcpF,GACdA,EAAiBsE,MAAM,EAAEjD,EAAakD,EAAG,EAAElD,EAAakD,GACxDvE,EAAiBkG,WAAW7E,EAAanI,GAAImI,EAAalI,GAC1DH,EAAegH,EAAkB0H,EAAkB,EAAOA,EAAkB,EAAOA,EAAkB,MAAWA,EAAkB,OAAW,QAC7I/N,EAASqG,EAAkB0H,EAAkB,EAAOA,EAAkB,EAAOA,EAAkB,MAAWA,EAAkB,OAAW,OAAO,IAC9I1H,EAAiBmG,UAMrBlD,EAAgBnD,GAAc,GAKlC,SAASiE,IACL,IAAIuE,EAAe,SAACrK,GAChB,SAAGA,EAAEuD,eAAe,aAAcvD,EAAC,UAMvC8B,EAAeiG,OAEfjG,EAAekG,UAAU,EAAG,EAAGvG,EAAYrG,GAC3C0G,EAAemG,UAAU1I,EAAUtE,EAAGsE,EAAUrE,GAChD4G,EAAeuE,MAAM9G,EAAU+G,EAAG/G,EAAU+G,GAC5C3C,EAASyD,MAAMC,QAAO,SAACrH,GACnB,SAAGqK,EAAarK,EAAEsH,UAAW+C,EAAarK,EAAEzG,YAK7CwG,SAAQ,SAASC,GAChB1B,EAASwD,EAAgB9B,EAAEsK,WAAYtK,EAAEsH,OAAOrM,EAAG+E,EAAEsH,OAAOpM,EAAG8E,EAAEzG,OAAO0B,EAAG+E,EAAEzG,OAAO2B,EAAG,KAAM8E,EAAErH,WAGnGgL,EAASiB,MAAMyC,QAAO,SAACrH,GACnB,OAAOqK,EAAarK,MACrB8E,KAAKhB,GAAiB/D,SAAQ,SAASC,EAAOpC,GAC7C,IAAI4J,EAAoBxH,EAAE9D,OA1oBjB,GA2oBLuL,EAAczH,EAAE9D,OAChBwL,EAA+B,EAAX1H,EAAE9D,OACtByL,EAA+B3H,EAAE4H,YACjCC,EAAwBH,EAAoBI,IAChD9K,EAAc8E,EAAgB9B,EAAEsK,WAAY9C,EAAkBxH,EAAEkE,WAC5DuD,EAAYzH,EAAEkE,WAAYwD,EAAkB1H,EAAEkE,WAAYlE,EAAE/E,EAAG+E,EAAE9E,GAAG,EACpEyM,EAA8BE,EAAsB7H,EAAEkE,YAAY,MAE1EpC,EAAeoG,UA5hBnBzJ,EAAGmB,OAAOgE,GAAc2G,GAAG,SA8J3B,WAAmF,IAG3EtF,EAH4BC,EAA8C,uDAAtC,KACxC,GAAIzG,EAAG+L,MAAMC,iBAAkB,OAG5BvF,EACCD,EAAKpB,GAELoB,EAAKxG,EAAG2G,MAAMtL,MACd+J,EAAmBoB,GAGvB,GAAGA,EACC,GAAwC,mBAArCM,EAAsBN,EAAG,GAAGA,EAAG,IAC9B0B,EAAe1B,EAAG,GAAIA,EAAG,QACxB,CACD,IAAIO,EAAWpB,EAAiBa,EAAG,GAAGA,EAAG,IACtCO,GACCvE,EAAYuE,EAASxC,QA/KgBuH,GAAG,YAAavF,GAAiBuF,GAAG,YAsIzF,WAAiF,IAAjCpF,EAAgC,wDACxEE,EAAaF,EACjBtB,EAAmB,KACnBF,EAASiB,MAAM7E,SAAQ,SAACC,GACpBqF,EAAaA,GAAchC,EAAiBrD,GAAG,GAC/CA,EAAE4F,SAAU,EACZ5F,EAAEkE,WAAa,KAEnBV,IACG6B,GACCS,OA/IRrH,EAAGmB,OAAOgE,GAAc8G,KAAKjM,EAAGkM,OAAOC,YAAY,CAAC,GAAQ,IAAIL,GAAG,QA2DnE,WACI,IAAItF,EAAKxG,EAAG2G,MAAMtL,MAClB+J,EAAmBoB,EACnB1F,EAAYd,EAAG+L,MAAMjL,UACoB,gBAAtCgG,EAAsBN,EAAG,GAAIA,EAAG,MAC/BjG,EAAgBO,GAChB2H,SA7DL/F,GACCoB,EACKqC,MAAMjB,EAASiB,OACf2F,GAAG,OAAQrD,GAEhB3E,EAAWE,MAAM,QACZ2E,MAAMzD,EAASyD,SAGpB7E,EAAWD,OACXC,EACKqC,MAAMjB,EAASiB,OAEpBrC,EAAWE,MAAM,QACZ2E,MAAMzD,EAASyD,OACpBF,O,oBA4gBR,WACI,OACI,uBAAKlE,GAAG,wBACJ,0BAAQA,GAAG,SAAS6H,UAAU,WAC9B,0BAAQ7H,GAAG,SAAS6H,UAAU,WAC9B,0BAAQ7H,GAAG,WAAW6H,UAAU,WAChC,uBACI7H,GAAG,WACH8H,MAAM,6BACND,UAAU,UAEV,qBAAG7H,GAAG,wBAGN,qBAAGA,GAAG,8BAIV,uBAAKA,GAAG,UAAU6H,UAAU,WAE5B,0BAAQ7H,GAAG,QAAQ6H,UAAU,gB,GA54BSpQ,aCEvCG,eAVS,SAACf,GAAD,MAAwB,CAC5CL,eAAgBK,EAAML,mBAIC,SAACqB,GAAD,MAAyB,KAKrCD,CAA6C+D,GCXtDoM,EAASC,IAAOD,OCPPE,E,kDD+CX,WAAYnS,GAAe,IAAD,8BACtB,cAAMA,IAFHoS,cAAoB,KAGvB,EAAKC,sBAAwB,EAAKA,sBAAsBlM,KAA3B,gBAC7B,EAAKmM,qBAAuB,EAAKA,qBAAqBnM,KAA1B,gBAC5B,EAAKgC,YAAc,EAAKA,YAAYhC,KAAjB,gBACnB,EAAKoM,0BAA4B,EAAKA,0BAA0BpM,KAA/B,gBACjC,EAAK+B,uBAAyB,EAAKA,uBAAuB/B,KAA5B,gBAC9B,EAAKpF,MAAQ,GAPS,E,0DAuB1B,SAA8BkF,GAE1BjF,KAAKoR,cAAgBnM,I,yBAGzB,SAAmBuM,IAEG,IADCxR,KAAKhB,MAAnByS,YAGDzR,KAAKhB,MAAM0S,wBAAwBF,GACnCxR,KAAKhB,MAAM2S,kBAAiB,GAC5B3R,KAAKhB,MAAM4S,mBAAmB,IAE9B5R,KAAKhB,MAAM0S,wBAAwBF,K,4BAI3C,SAAsBK,EAAoBC,GACtC,IAAIC,EAAQ,GACZ,GAAIF,EACA,IAAI,IAAI/N,EAAI,EAAGA,EAAGgO,EAAWhO,IACzBiO,EAAMC,KAAK,CACP,KAAOlO,EACP,MAAQ1F,EAAa0F,EAAE,KAInC,OAAOiO,I,oCAcX,SAA8BE,EAAkBC,EAAmBC,EAAoBC,EAAoBC,EAAgBC,EAAiBC,EACxI1R,EAA6B2R,EAA4Bf,EAAoBpQ,EAAcC,GAC3F,IAMImR,EANAC,EAAKJ,EACLK,EAAYJ,EAAmBK,KAAK,KACpCC,EAAaR,EAAWO,KAAK,KAC7BE,EAASb,EAIbQ,EAAaK,EAAOtN,KAAK,IAAIsN,EAAOC,UACvB,aAAaJ,EADbG,wBAEWD,EAFXC,uBAGYJ,EAAG,eACf7R,EAAoB,IAAIQ,EAAM,IAAIC,EAAO,IACtD,IAAI0R,EAAWzU,EAAiBuU,GAC5BG,EAAeH,EAAOI,QAEtBC,EAAcH,EAASI,QACvBC,EAAcL,EAASM,UACvBC,EAAWP,EAASrU,UACpB6U,EAAWR,EAASI,QAAQzP,OAC5B8P,EAAUtB,EAId,GAAiC,IAA9BI,EAAmB5O,OAAa,CAC/B4O,EAAqB,GACrB,IAAI,IAAIzO,EAAI,EAAGA,EAAEyP,EAASzP,IACtByO,EAAmBP,KAAKlO,GAgBhC,IAAI4P,GAAwB,EACxBtC,EAAgBpR,KAAKoR,cACtBA,GAAiBA,EAAa,SAC1BA,EAAa,MAAUzN,SAAW4P,IACjCG,GAAwB,GAKhC,IAAIC,EAAa,GACbC,EAAa,GACbC,EAAmB,GAGnBhC,EAA4C,IAAtBQ,EAAW1O,OAGjCmQ,EAAiB,GAChBjC,IACDiC,EAAa,CAHA,SAKjB,IAhEyG,IAmHrGC,EACAC,EApHqG,WAgEjGlQ,GACJ,IAEI0M,EADAyD,EAAQnQ,EAER2J,EAAY,EAEZtL,EAAQ2R,EAAW/I,QACvBsH,EAAWpM,SAAQ,SAACC,GAChB,GAAS,iBAANA,EAAqB,CACpB,IAAIgO,EAASjB,EAAagB,GAC1B9R,EAAM6P,KAAK5T,EAAa8V,EAAQ,QAC/B,CACD,IAAIA,EAAShC,EAAchM,GAAG+N,GAC9B9R,EAAM6P,KAAK5T,EAAa8V,EAAQ,QAGxC1D,EAAarO,EAAM4I,QAChBwH,EAAmBxG,QAAQkI,GAAO,IAEjC9R,EAAQ,CAAC,QACTsL,EAAY,GAMhB,IAAIrL,EAAS,EACV6R,IAAUzB,IAAsC,IAAff,IAChCrP,EAAS,GAEb,IAAI+R,EAAkB,CAClB,GAAKF,EACL,MA/BQ,EAgCR,MAAQ9R,EACR,WAAaqO,EACb,OAASpO,EACT,UAAYqL,EACZ,YAAc7O,EAhCA,IAkCf8U,IACCS,EAAW,EAAQ/C,EAAa,MAAUtN,GAAvB,EACnBqQ,EAAW,EAAQ/C,EAAa,MAAUtN,GAAvB,GAMvB6P,EAAW3B,KAAKmC,IA/CZrQ,EAAI,EAAGA,EAAEyP,EAASzP,IAAK,EAAvBA,GAqDLwO,GAAmC,GAApBA,EAAY3O,QAC1BoQ,GAAgB,EAGZC,EAFwBI,OAAOC,KAAKvB,EAAOwB,UACrBvI,QAAQuG,IAAgB,EAC3BQ,EAAOwB,SAAShC,GAEhBmB,EAAQnB,IAG/ByB,GAAgB,EAGpB,IAAI,IAAIjQ,EAAI,EAAGA,EAAE0P,EAAS1P,IAAI,CAC1B,IAAIyQ,EAAa,OAEbC,EAAc,GACfT,IACCS,EAAcR,EAAiBlQ,IAGhCyO,EAAmBxG,QAAQoH,EAAYrP,KAAK,GACxCyO,EAAmBxG,QAAQsH,EAAYvP,KAAK,IAC3CyQ,EAAa,QAIlBV,EAAiB9H,QAAQwI,IAAa,GAGrCV,EAAiB7B,KAAKuC,GAG1BX,EAAW5B,KAAK,CACZ,OAAUmB,EAAYrP,GACtB,OAAUuP,EAAYvP,GACtB,MAAQ,EACR,OAASlF,EAAY4V,GACrB,MAAQD,EACR,WAnBa,SAkCrB,MAXiB,CACb,SAAU,EACV,KAAO9B,EACP,MAAQkB,EACR,MAAQC,EACR,YAAcC,EACd,QAAUN,EACV,QAAUC,EACV,qBAAuB3S,EACvB,YAAcb,KAAKyU,eAAe5C,EAAYiB,EAAO4B,qB,oCAe7D,SAA8BzC,EAAkBC,EAAmBG,EAAgBG,EAC/EmC,EAAkBC,EAAW/T,EAA6B4Q,EAAoBpQ,EAAcC,GAC5F,IAAIwR,EAASb,EAGTQ,EAAaK,EAAOtN,KAAK,IAAIsN,EAAOC,UACvB,SAAS4B,EADT7B,kBAESN,EAAoB,YAC7B3R,EAAoB,IAAIQ,EAAM,IAAIC,EAAO,IACtDiS,EAAWT,EAAOnU,UAClB6U,EAAWV,EAAOrU,KAAKkF,OACvBsP,EAAeH,EAAOI,QAEtBC,EAAcL,EAAOrU,KACrB4U,EAAcP,EAAOpU,KAErB6T,EAAqBqC,EAAMD,GAAWnC,GAAqB1H,MAE3D+J,EAAqBD,EAAMD,GAAWnC,GAAqBsC,KAC3DrB,EAAUmB,EAAMD,GAAWnC,GAAqBiB,QAShDnM,EAAuBzG,EAMvB6S,GAAwB,EACxBtC,EAAgBpR,KAAKoR,cACtBA,GAAiBA,EAAa,SAC1BA,EAAa,MAAUzN,SAAW4P,IACjCG,GAAwB,GAKhC,IAAIC,EAAa,GACbC,EAAa,GACbC,EAAmB,GAGnBhC,EAA4C,IAAtBQ,EAAW1O,OAGjCmQ,EAAiB,GAChBjC,IACDiC,EAAa,CAHA,SAMjB,IADA,IAAIiB,EAAoB,EAtDkF,WAuDlGjR,GACJ,IAEI0M,EADAyD,EAAQnQ,EAER2J,EAAY,EAEZtL,EAAQ2R,EAAW/I,QACvBsH,EAAWpM,SAAQ,SAACC,GAChB,GAAS,iBAANA,EAAqB,CACpB,IAAIgO,EAASjB,EAAagB,GAC1B9R,EAAM6P,KAAK5T,EAAa8V,EAAQ,QAC/B,CACD,IAAIA,EAAShC,EAAchM,GAAG+N,GAC9B9R,EAAM6P,KAAK5T,EAAa8V,EAAQ,QAGxC1D,EAAarO,EAAM4I,QAEhBwH,EAAmBwC,KAAuBjR,EACzCiR,GAAwC,GAGxC5S,EAAQ,CAAC,QACTsL,EAAY,GAGhB,IAAIrL,EAAS,EACV6R,IAAUzB,IAAsC,IAAff,IAChCrP,EAAS,GAEb,IAAI+R,EAAkB,CAClB,GAAKF,EACL,MA/BQ,EAgCR,MAAQ9R,EACR,WAAaqO,EACb,OAASpO,EACT,UAAYqL,EACZ,YAAc7O,EAhCA,IAkCf8U,IACCS,EAAW,EAAQ/C,EAAa,MAAUtN,GAAvB,EACnBqQ,EAAW,EAAQ/C,EAAa,MAAUtN,GAAvB,GAMvB6P,EAAW3B,KAAKmC,IA/CZrQ,EAAI,EAAGA,EAAEyP,EAASzP,IAAK,EAAvBA,GAoDR,IADA,IAAIkR,EAAoB,EAChBlR,EAAI,EAAGA,EAAE0P,EAAS1P,IAAI,CAC1B,IAAIyQ,EAAa,OAEbC,EAAc,GAEf1Q,IAAM+Q,EAAmBG,KACxBT,EAAa,OACbC,EAAcf,EAAQuB,GACtBA,GAAwC,GAGzCnB,EAAiB9H,QAAQwI,IAAa,GAGrCV,EAAiB7B,KAAKuC,GAG1BX,EAAW5B,KAAK,CACZ,OAAUmB,EAAYrP,GACtB,OAAUuP,EAAYvP,GACtB,MAAQ,EACR,OAASlF,EAAY4V,GACrB,MAAQD,EACR,WAnBa,SAkCrB,MAXiB,CACb,SAAU,EACV,KAAO9B,EACP,MAAQkB,EACR,MAAQC,EACR,YAAcC,EACd,QAAUN,EACV,QAAUC,EACV,qBAAuBlM,EACvB,YAActH,KAAKyU,eAAe5C,EAAYiB,EAAO4B,qB,mCAM7D,SAA6BlV,GACzBL,QAAQC,IAAI,gBAAiBI,GAI7BQ,KAAKhB,MAAM4B,0BAA0BpB,K,kCAIzC,SAA4BN,GACxBc,KAAKhB,MAAM4S,mBAAmB1S,K,iDAIlC,SAA2CqT,EAAwB/K,GAC/D,GAAiC,IAA9B+K,EAAmB5O,OAClB,MAAO,GAIP,IADA,IAAIsR,EAAyB1C,EAAmBxH,QACxCjH,EAAI,EAAIA,EAAEyO,EAAmB5O,OAAQG,IAAI,CAC7C,IAAIoR,EAAS3C,EAAmBzO,GAChCmR,EAAyBA,EAAuBE,OAAO3N,EAAY0N,IAIvE,OADAD,EAAyBG,MAAMC,KAAK,IAAIC,IAAIL,M,uCAOpD,SAAiCzD,EAAa+B,GAC1C,IAAIgC,EAAqBC,SAAShE,KAC9B+D,GAAeA,EAAY,KAC3BA,EAAc,GAEfA,GAAahC,IACZgC,EAAchC,EAAW,GAE7BpU,QAAQC,IAAI,yBAA0BmW,GACtCvV,KAAKhB,MAAM0S,wBAAwB6D,K,uCAIvC,WACIvV,KAAKhB,MAAMK,sCAAqC,K,oBAEpD,WAAiB,IAiCTkG,EAjCQ,OACZ,EACwFvF,KAAKhB,MADxFiT,EAAL,EAAKA,aAAcC,EAAnB,EAAmBA,cAAeC,EAAlC,EAAkCA,eAAgBC,EAAlD,EAAkDA,eAAgBwC,EAAlE,EAAkEA,MAAOvC,EAAzE,EAAyEA,WAAYC,EAArF,EAAqFA,YAAamD,EAAlG,EAAkGA,SAC9FlD,EADJ,EACIA,mBAAoBd,EADxB,EACwBA,WAAYe,EADpC,EACoCA,oBAAqBnR,EADzD,EACyDA,MAAOC,EADhE,EACgEA,OAAQoU,EADxE,EACwEA,aAEpEvO,EAAcnH,KAAKmH,YACnBD,EAAyBlH,KAAKkH,uBAC9ByO,EAAqBpD,EAMrB/K,ERnVZ,SAA8BwL,GAW1B,IAJA,IAAII,EAAUJ,EAASI,QACnBE,EAAYN,EAASM,UACrBC,EAAWP,EAASrU,UACpB6I,EAAkB,GACd1D,EAAI,EAAGA,EAAEyP,EAAUzP,IACvB0D,EAAY1D,GAAK,GAErB,IAAI,IAAIA,EAAI,EAAGA,EAAGwP,EAAU3P,OAAQG,IAAI,CACpC,IAAI8R,EAActC,EAAUxP,GACzB8R,KAAepO,IAEdA,EAAYoO,GAAe,IAE/BpO,EAAYoO,GAAa5D,KAAKoB,EAAQtP,IAE1C,OAAO0D,EQ6TeqO,CAHHtX,EADF0T,IAOT6D,EAAqBzU,EAAQ,GAC7B0U,EAAsBzU,EAAS,GAkBnC,GAjBGmQ,EACIpQ,EAAQ,KAAOA,EAAQ,IACtB0U,EAAsBzU,EAAS,GAAK,GAC/BD,GAAS,MACd0U,EAAsBzU,EAAS,GAAK,IAGrCD,EAAQ,KAAOA,EAAQ,IACtB0U,EAAsBzU,EAAS,GAAK,GAC/BD,GAAS,MACd0U,EAAsBzU,EAAS,GAAK,IAOzCoU,GAAgB,EAEZjE,IACCkE,EAAqB,CAACnD,IAGN,IAAjBkD,EACCC,EAAqB3V,KAAKgW,oCAAoCL,EAAoBnO,GAC5D,IAAjBkO,IACLC,EAAqB3V,KAAKgW,oCAAoCL,EAAoBnO,GAClFmO,EAAqB3V,KAAKgW,oCAAoCL,EAAoBnO,IAGtFjC,EAAavF,KAAKiW,uBAAuBhE,EAAcC,EAAeC,EAAgBC,EAClFC,EAAYC,EAAaqD,EAAoB3V,KAAKhB,MAAM6B,oBACxD2R,EAAqBf,EAAYqE,EAAoBC,OACtD,CACH,IAAIpB,EAAYc,EAASC,EAAa,GACtCC,EAAqBf,EAAMD,GAAWnC,GAAqB1H,MAE3DvF,EAAavF,KAAKkW,uBAAuBjE,EAAcC,EAAeG,EAAYG,EAC9EmC,EAAWC,EAAO5U,KAAKhB,MAAM6B,oBAAqB4Q,EAClDqE,EAAoBC,GAM5B,GAFAxQ,EAAU,YAAkBiC,EAEzBjC,EAAU,QAAY,CAcrB,IARA,IAAI6B,EAAkB7B,EAAU,QAG5B4Q,EAAkB,CAClB,CAAC,EAAE,QACH,CAAC,EAAE,WACH,CAAC,EAAE,YAEEC,EAAe,EAAGA,EAAeX,EAAS9R,OAAQyS,IACvDD,EAAgBnE,KAAK,CAACoE,EAAe,EAAGX,EAASW,KAarD,OACA,uBAAKzM,MAAO,CAACtI,MAAO,OAAQC,OAAWtB,KAAKhB,MAAMsC,OAAS,GAAI,KAAM+U,UAAW,WAC5E,uBAAKtF,UAAU,sBAAf,aACI,uBAAKpH,MAAO,CAAC2M,MAAM,UAAnB,mBAGE7E,EAAY,CAAC,wBAAMlR,IAAK,SAAX,OACf,gBAAC,IAAD,CAAagP,IAAK,EAAGgH,IAAKnP,EAASoP,KAAK,QAAQ/S,MAAO+O,EAAqB9R,SAAU,SAACxB,GAAU,EAAKqS,0BAA0BrS,EAAEkI,MAClI,wBAAM7G,IAAK,SAAX,QACA,gBAAC,IAAD,CAAQiW,KAAK,QAAQ/V,QAAS,WAAK,EAAKzB,MAAM2S,kBAAiB,GAAO,EAAK3S,MAAM4S,mBAAmB,KAApG,MAAuH,CAAC,wBAAMrR,IAAK,WAEnI,gBAACkW,EAAD,MARA,mCAYA,gBAAC,IAAD,CACIC,YAAY,0BACZjT,MAAOiS,EACP/L,MAAO,CAAEtI,MAAO,SAChBX,SAAUV,KAAKsR,qBACfqF,UAAWlF,EACX+E,KAAK,SAEJL,EAAgBS,KAAI,SAAC1Q,GAAD,OACjB,gBAAC+K,EAAD,CAAQxN,MAAOyC,EAAE,GAAI3F,IAAK2F,EAAE,IACvBA,EAAE,QAtBf,mBA4BElG,KAAKhB,MAAM6B,oBACT,gBAAC,IAAD,CAAQL,KAAK,UAAUgW,KAAK,QAAQ/V,QAzC/B,WACb,EAAK4Q,uBAAsB,KAwCnB,mBACA,gBAAC,IAAD,CAAQ7Q,KAAK,UAAUgW,KAAK,QAAQ/V,QAvC9B,WACd,EAAK4Q,uBAAsB,KAsCnB,oBA9BJ,mBAiCA,gBAAC,IAAD,CAAQ7Q,KAAK,UAAUgW,KAAK,QAAQ/V,QAAS,WAAK,EAAKoW,8BAA+B,gBAACC,EAAA,EAAD,OAjCtF,4BAoCQ,gBAAC,IAAD,KRzZ5B,SAA6BC,EAA4BC,GACrD,IAAIC,EAAoBF,EAAqB,IAAKC,EAQlD,OANuB,IAApBA,IAICC,EAAMA,EAAM,MADCF,EAAqBC,EAAkB,KACtBE,QAAQ,GAAI,MAEvCD,EQgZuBE,CAAoBxB,EAAmBhS,OAAQyD,GAArD,OAKZ,uBAAK2J,UAAU,WACX,uBACApH,MAAO,CACHtI,MAAO,SAGX,gBAAC+V,EAAD,CAAmC7R,WAAYA,EAC/ClE,MAAOyU,EAAoBxU,OAAQyU,EACnC5O,YAAaA,EAAaD,uBAAwBA,OAKtD,OAAO,gC,GAnlBgBvG,aEdxBG,eAtBS,SAACf,GAAD,MAAwB,CAC5CwS,mBAAqBxS,EAAMwS,mBAC3B8E,iCAAkCtX,EAAMsX,iCACxC5F,WAAY1R,EAAM0R,WAClBe,oBAAqBzS,EAAMyS,oBAC3BkD,aAAe3V,EAAM2V,aACrBvV,+BAAgCJ,EAAMI,+BACtCU,oBAAsBd,EAAMc,wBAIL,SAACE,GAAD,MAAyB,CAChDuW,yBAA2B,SAAC3B,GAAD,OAA4B5U,ERWnB,SAAC4U,GAAD,MAA6B,CACjEnV,KChBwC,+BDiBxCmV,mBAAoBA,GQb4C2B,CAAyB3B,KACzFjE,wBAA0B,SAACc,GAAD,OAAgCzR,ERevB,SAACyR,GAAD,MAA4B,CAC/DhS,KCjBsC,6BDkBtCgS,oBAAqBA,GQjB8Cd,CAAwBc,KAC3F+E,oBAAqB,SAACnG,GAAD,OAAuBrQ,ERuBb,SAACqQ,GAAD,MAAwB,CACvD5Q,KCvBkC,yBDwBlC4Q,cAAeA,GQzBsCmG,CAAoBnG,KACzEO,iBAAkB,SAACF,GAAD,OAAwB1Q,ERkBd,SAAC0Q,GAAD,MAAyB,CACrDjR,KC7B8B,qBD8B9BiR,WAAYA,GQpBuCE,CAAiBF,KACpEG,mBAAoB,SAAC8D,GAAD,OAAsB3U,ERXZ,SAAC2U,GAAD,MAA0B,CACxDlV,KCgBgC,uBDfhCkV,aAAcA,GQSqC9D,CAAmB8D,KACtErW,qCAAsC,SAACa,GAAD,OAAqBa,EAAS1B,EAAqCa,KACzGU,0BAA2B,SAACC,GAAD,OAAkCE,EAASH,EAA0BC,QAIrFC,CAA6CqQ,G,mCC1BtDqG,GAEAC,OAAOC,SAASC,OAChBC,GAAiBC,IAAMC,OAAO,CAChCC,QAAQ,GAAD,OAAKP,GAAL,SAEPQ,QAAS,CACL,8BAA+B,OAKjCC,GAAOR,OAAOC,SAASC,OASzBO,IARmBL,IAAMC,OAAO,CAChCC,QAAQ,GAAD,OAAKE,GAAL,UAEPD,QAAS,CACL,8BAA+B,OAIiBJ,IAGjD,SAAeO,KAAtB,gC,8CAAO,8BAAAlO,EAAA,6DACCmO,EADD,mBAMeF,GAAcG,IAAID,GANjC,UAOgB,OADbE,EANH,QAOKC,OAPL,yCAQQD,EAAI5R,MARZ,aAUG4R,EAVH,4C,sBAcA,SAAeE,GAAtB,mC,8CAAO,WAA4BC,GAA5B,mBAAAxO,EAAA,sDACCmO,EAAM,UADP,sBAKEE,EALF,qCAOMI,EAAS,CAAED,cAPjB,UAQcP,GAAcG,IAAID,EAAK,CAACM,WARtC,QAQEJ,EARF,kBAWgB,MAAfA,EAAIC,OAXL,0CAYQD,EAAI5R,MAZZ,cAcG4R,EAdH,6C,sBAkBA,SAAeK,GAAtB,mC,8CAAO,WAA+BF,GAA/B,mBAAAxO,EAAA,sDACCmO,EAAM,aADP,sBAKCE,EALD,qCAOKI,EAAS,CAAED,cAPhB,UAQaP,GAAcG,IAAID,EAAK,CAACM,WARrC,QAQCJ,EARD,kBAUgB,MAAfA,EAAIC,OAVL,0CAWQD,EAAI5R,MAXZ,cAaG4R,EAbH,6C,sBAiBA,SAAeM,GAAtB,mC,8CAAO,WAA4BH,GAA5B,mBAAAxO,EAAA,sDACCmO,EAAM,aADP,sBAKCE,EALD,qCAOKI,EAAS,CAAED,cAPhB,UAQaP,GAAcG,IAAID,EAAK,CAACM,WARrC,QAQCJ,EARD,kBAUgB,MAAfA,EAAIC,OAVL,0CAWQD,EAAI5R,MAXZ,cAaG4R,EAbH,6C,sBAiBA,SAAeO,GAAtB,qC,8CAAO,WAA4BJ,EAAmBK,GAA/C,mBAAA7O,EAAA,sDACCmO,EAAM,aADP,sBAKCE,EALD,qCAOKI,EAAS,CAAED,aAAYK,YAP5B,UAQaZ,GAAcG,IAAID,EAAK,CAACM,WARrC,QAQCJ,EARD,kBAUgB,MAAfA,EAAIC,OAVL,0CAWQD,EAAI5R,MAXZ,cAaG4R,EAbH,6C,sBAiBA,SAAeS,GAAtB,qC,8CAAO,WAA+BN,EAAmBO,GAAlD,mBAAA/O,EAAA,sDACCmO,EAAM,gBADP,sBAKCE,EALD,qCAOKI,EAAS,CAAED,aAAYO,eAP5B,UAQad,GAAcG,IAAID,EAAK,CAACM,WARrC,QAQCJ,EARD,kBAUgB,MAAfA,EAAIC,OAVL,0CAWQD,EAAI5R,MAXZ,cAaG4R,EAbH,6C,sBC9GP,IAAMrH,GAASC,IAAOD,OAaDgI,G,kDACjB,WAAYja,GAA2B,IAAD,8BAClC,cAAMA,IACDka,wBAA0B,EAAKA,wBAAwB/T,KAA7B,gBAC/B,EAAKpF,MAAQ,GAHqB,E,qDAOtC,WACIC,KAAKmZ,oB,oEAET,oGACsChB,KADtC,QAE0C,KADhCiB,EADV,QAE0B,SAClBpZ,KAAKhB,MAAMma,gBAAgBC,EAAmB,UAHtD,gD,2FAQA,SAA+B3V,GAC3BzD,KAAKhB,MAAMqa,cAAc5V,GACzBzD,KAAKhB,MAAMsa,gB,oBAEf,WACI,IAAIC,EAA0BvZ,KAAKhB,MAAMwa,YAAY7V,QAAU,EAC/D,OACQ,gBAAC,IAAD,kBAEQ,gBAAC,IAAD,CACI+S,YAAY,mBACZjT,MAAOzD,KAAKhB,MAAMyZ,iBAAegB,EACjC9P,MAAO,CAAEtI,MAAO,SAChBX,SAAUV,KAAKkZ,wBACfvC,SAAU4C,GAETvZ,KAAKhB,MAAMwa,YAAY5C,KAAI,SAAC1Q,GAAD,OACxB,gBAAC,GAAD,CAAQzC,MAAOyC,EAAEgD,GAAI3I,IAAK2F,EAAEgD,IACvBhD,EAAEV,e,GArCG7E,aCM3BG,gBAbS,SAACf,GAAD,MAAwB,CAC5C0Y,WAAY1Y,EAAM0Y,WAClBe,YAAazZ,EAAMyZ,gBAII,SAACzY,GAAD,MAAyB,CAChDsY,cAAe,SAACZ,GAAD,OAA8B1X,EXVpB,SAAC0X,GAAD,MAA8B,CACvDjY,KCP6B,oBDQ7BiY,WAAYA,GWQ0CY,CAAcZ,KACpEa,YAAa,kBAAMvY,EXmCU,CAC7BP,KCxByB,mBUXzB2Y,gBAAkB,SAACK,GAAD,OAAsBzY,EXsCb,SAACyY,GAAD,MAAqB,CAChDhZ,KCtD6B,oBDuD7BgZ,YAAaA,GWxCoCL,CAAgBK,QAItD1Y,CAA6CmY,ICpBtDhI,GAASC,IAAOD,OAUDyI,G,kDACjB,WAAY1a,GAAgB,IAAD,8BACvB,cAAMA,IACD2a,uBAAyB,EAAKA,uBAAuBxU,KAA5B,gBAC9B,EAAKpF,MAAQ,GAHU,E,0DAK3B,SAA8B0D,GAC1BzD,KAAKhB,MAAM4a,aAAanW,K,oBAE5B,WAII,IAHA,IAAKoW,EAAkB7Z,KAAKhB,MAAvB6a,eACDC,EAAyBD,EAAelW,QAAU,EAClDoW,EAAyB,GACrBjW,EAAI,EAAGA,EAAE+V,EAAelW,OAAQG,IAAI,CACxC,IAAIkW,EAAoB,CACpB,KAAQH,EAAe/V,GACvB,GAAMA,GAEViW,EAAuB/H,KAAKgI,GAEhC,OACQ,gBAAC,IAAD,mBAEI,gBAAC,IAAD,CACIC,KAAK,WACLC,YAAU,EACVxD,YAAY,iBACZ/M,MAAO,CAAEtI,MAAO,SAChBX,SAAUV,KAAK2Z,uBACfhD,SAAUmD,EACVK,aAAc,IAEbJ,EAAuBnD,KAAI,SAAC1Q,GAAD,OACxB,gBAAC,GAAD,CAAQzC,MAAOyC,EAAEV,KAAMjF,IAAK2F,EAAEgD,IAAKhD,EAAEV,e,GAjCrB7E,aCO7BG,gBAVS,SAACf,GAAD,MAAwB,CAC5CsS,WAAYtS,EAAMsS,eAIK,SAACtR,GAAD,MAAyB,CAChD6Y,aAAc,SAACvH,GAAD,OAA4BtR,Eb8ClB,SAACsR,GAAD,MAAqB,CAC7C7R,KCrDyB,gBDsDzB6R,WAAYA,GahDuCuH,CAAavH,QAIrDvR,CAA6C4Y,ICjBtDzI,GAASC,IAAOD,OAUDmJ,G,kDACjB,WAAYpb,GAA8B,IAAD,8BACrC,cAAMA,IACDqb,wBAA0B,EAAKA,wBAAwBlV,KAA7B,gBAC/B,EAAKpF,MAAQ,GAHwB,E,2DAOzC,SAA+B0D,GAC3BzD,KAAKhB,MAAMsb,cAAc7W,K,oBAE7B,WAII,IAHA,IAAK8W,EAAmBva,KAAKhB,MAAxBub,gBACDC,EAA0BD,EAAgB5W,QAAU,EACpD8W,EAA0B,GACtB3W,EAAI,EAAGA,EAAEyW,EAAgB5W,OAAQG,IAAI,CACzC,IAAI4W,EAAqB,CACrB,KAAQH,EAAgBzW,GACxB,GAAMA,GAEV2W,EAAwBzI,KAAK0I,GAEjC,OACQ,gBAAC,IAAD,oBAEQ,gBAAC,IAAD,CACIR,YAAU,EACVxD,YAAY,kBACZ/M,MAAO,CAAEtI,MAAO,SAChBX,SAAUV,KAAKqa,wBACf1D,SAAU6D,GAETC,EAAwB7D,KAAI,SAAC1Q,GAAD,OACzB,gBAAC,GAAD,CAAQzC,MAAOyC,EAAEV,KAAMjF,IAAK2F,EAAEgD,IAAKhD,EAAEV,e,GAjCxB7E,aCO9BG,gBAVS,SAACf,GAAD,MAAwB,CAC5CuS,YAAavS,EAAMuS,gBAII,SAACvR,GAAD,MAAyB,CAChDuZ,cAAe,SAAChI,GAAD,OAA6BvR,EfmDnB,SAACuR,GAAD,MAAsB,CAC/C9R,KC7D0B,iBD8D1B8R,YAAaA,GerDwCgI,CAAchI,QAIxDxR,CAA6CsZ,ICjB7CO,G,kDCWX,WAAY3b,GAA2B,IAAD,8BAClC,cAAMA,IACDe,MAAQ,GAFqB,E,0CAMtC,WACI,MAAwCC,KAAKhB,MAAxC6a,EAAL,EAAKA,eAAgBU,EAArB,EAAqBA,gBAYrB,OACI,2BACA,uBAAKxJ,UAAU,aAAf,iBACA,uBAAKA,UAAU,WACP,gBAAC,IAAD,KACI,gBAAC6J,GAAD,OAEJ,gBAAC,IAAD,KAhBiB,SAACf,GAC1B,OAAO,gBAACgB,GAAD,CAAyBhB,eAAgBA,IAgBnCiB,CAAuBjB,IAE5B,gBAAC,IAAD,KAdkB,SAACU,GAC3B,OAAO,gBAACQ,GAAD,CAA0BR,gBAAiBA,IAcrCS,CAAwBT,U,GA/BP5Z,aCM3BG,gBATS,SAACf,GAAD,MAAwB,CAC5C0Y,WAAa1Y,EAAM0Y,eAII,SAAC1X,GAAD,MAAyB,KAIrCD,CAA6C6Z,I,qBCjB7CM,G,kDCgCX,WAAYjc,GAAe,IAAD,uBACtB,cAAMA,IAHHkc,kBAEmB,IADnBC,qBACmB,EAEtB,EAAKC,aAAe,EAAKA,aAAajW,KAAlB,gBACpB,EAAKkW,wBAA0B,EAAKA,wBAAwBlW,KAA7B,gBAC/B,EAAKmW,uBAAyB,EAAKA,uBAAuBnW,KAA5B,gBAC9B,EAAK+V,aAAeva,cACpB,EAAKwa,gBAAkBxa,cAND,OAQtB,EAAKZ,MAAQ,CACTkS,aAAa,CACTsJ,OAAS,EACTC,OAAS,GAEbC,WAAY,KACZvJ,cAAe,KACfC,eAR+C,GAS/CC,eAAgB,KAChBsJ,UAAW,GACX9G,MAAO,KACP+G,cAAe,KACfC,YAAc,EACdC,aAAc,GArBI,E,qDAgDzB,WAEI7b,KAAK8b,SAAS,CACVH,cAAe3b,KAAK+b,uBACpBF,aAAcpE,OAAOuE,YACrBJ,YAAanE,OAAOwE,e,wEAI5B,WAAiCxD,GAAjC,6FACqBG,GAAaH,GADlC,OAGI,GAFI/R,EADR,OAEQwV,EAA+C,IAC5B,IAApBxV,EAAI,QAAqB,CAEzB,IAASyV,KADTzV,EAAI,UAAJ,UAAiC+R,EAChB/R,EAAI,UAAJ,SACT0V,EAAQ,SAASjH,OAAOgH,GAC5BD,EAAcE,GAAS1V,EAAI,UAAJ,SAA8ByV,GAEzDzV,EAAI,UAAJ,SAAgCwV,EAChClc,KAAK8b,SAAS,CACV7J,aAAcvL,EAAI,YAEtB1G,KAAKhB,MAAM4B,2BAA0B,GAb5C,gD,wHAiBA,WAA0B6X,GAA1B,uGACsBD,GAAaC,GADnC,WAE4B,KADpB4D,EADR,QAEY,QAFZ,iBAGWC,EAA8C,GAC9CJ,EAA+C,GAJ1D,cAM8BG,EAAK,QANnC,gEAMgBE,EANhB,kBAO6B1D,GAAaJ,EAAY8D,EAAU,IAPhE,QAWW,IAASJ,KAJLK,EAPf,OAQWF,EAAaE,EAAK,UAAL,MAA8BA,EAAK,UAAL,QAG1BA,EAAK,UAAL,SACTJ,EAAQI,EAAK,UAAL,KAA2BrH,OAAO,KAC9C+G,EAAcE,EAAMjH,OAAOgH,IAAQK,EAAK,UAAL,SAA+BL,GAbjF,+IAgBOnc,KAAK8b,SAAS,CACVL,WAAYY,EAAK,OACjBnK,cAAeoK,EACfnK,eAAgB+J,IAnB3B,gE,2HAyBA,WAA6BzD,GAA7B,iGACsBE,GAAgBF,GADtC,WAE4B,KADpBgE,EADR,QAEY,QAFZ,iBAIYC,EAAkC,GAJ9C,cAK8BD,EAAK,WALnC,gEAKiBE,EALjB,kBAM8B5D,GAAgBN,EAAYkE,EAAS,IANnE,QAMgBC,EANhB,OAOYF,EAAWE,EAAK,MAAYA,EAAK,eAP7C,+IASQ5c,KAAK8b,SAAS,CACVJ,UAAWe,EAAK,UAAc7F,KAAI,SAAC1Q,GAAD,OAAUA,EAAC,QAC7C0O,MAAO8H,IAXnB,gE,4FAgBA,SAA+BlX,GAC3B,IAAInE,EAAQ,EACRC,EAAS,EAab,MAZY,cAATkE,EACIxF,KAAKkb,eACJ7Z,EAAQrB,KAAKkb,aAAa2B,QAAQC,YAClCxb,EAAStB,KAAKkb,aAAa2B,QAAQE,cAEzB,iBAATvX,GACFxF,KAAKmb,kBACJ9Z,EAAQrB,KAAKmb,gBAAgB0B,QAAQC,YACrCxb,EAAStB,KAAKmb,gBAAgB0B,QAAQE,cAIvC,CACH,MAAQ1b,EACR,OAASC,K,kCAIjB,WAA8B,IAAD,OAEtBqa,EAAoB,GAIxB,MALe,CAAC,YAAa,gBAEpB1V,SAAQ,SAACC,GACdyV,EAAczV,GAAK,EAAKmV,wBAAwBnV,MAE7CyV,I,oCAIV,SAA8BnW,GAC1B,IAAImW,EAAgB3b,KAAKD,MAAM4b,cAChC,OAAGA,GACIA,EAAcnW,GACNmW,EAAcnW,GAKlB,O,gCAKd,SAAmBH,EAAkBC,GAG/BD,EAAUoT,aAAezY,KAAKhB,MAAMyZ,aAE/BzY,KAAKhB,MAAMyZ,YAAezY,KAAKhB,MAAMyZ,YAAY,GAEjDzY,KAAKgd,oBAAoBhd,KAAKhB,MAAMyZ,YAEpCzY,KAAKid,aAAajd,KAAKhB,MAAMyZ,YAE7BzY,KAAKkd,gBAAgBld,KAAKhB,MAAMyZ,aAGhCzY,KAAK8b,SAAS,CACV7J,aAAa,CACTsJ,OAAS,EACTC,OAAS,MAOtBnW,EAAU8X,gBAAgBnd,KAAKhB,MAAMme,eACjC9X,EAAU+X,eAAiBpd,KAAKhB,MAAMoe,cACrCpd,KAAK8b,SAAS,CACVH,cAAe3b,KAAK+b,2B,4BAMpC,SAAsBsB,M,0BAEtB,SAAoBA,GAChBle,QAAQC,IAAI,eAAgBie,GAC5Ble,QAAQC,IAAI,SAAUY,KAAK+b,wBAC3B/b,KAAK8b,SAAS,CACVH,cAAgB3b,KAAK+b,2B,oBAI7B,WAAiB,IAAD,OAEP9J,EAAgBjS,KAAKD,MAArBkS,aACDwG,GAAc,EACfxG,EAAac,YACZ0F,EAAaxG,EAAac,WAI9B,IAwCIuK,EAAc/a,KAAKgb,MAAMvd,KAAKhB,MAAMme,cAAgB,IAMpDE,EAAS,CACT,CAACvZ,EAAG,IAAK3C,EAAG,EAAGC,EAAG,EAAGoc,EAAG,GAAIC,EAHVH,EAG8BI,QARjC,GASf,CAAC5Z,EAAG,IAAK3C,EAAG,EAAGC,EAAG,EAAGoc,EAAG,EAAGC,EALXH,EAK6BI,QAT9B,IAqCnB,OAvBwB,WACpB,IAAIC,EAAclG,OAAOwE,WAIzB,OAAO,2BAAK,gBAAC,KAAD,CAAYlL,UAAU,SAASsM,OAAQA,EAC/CO,KAAM,GAAIC,UAAW,GAAIxc,MAAOsc,EAAaG,eAAgB,EAAKA,eAClE1C,aAAc,EAAKA,cACf,uBAAKrK,UAAU,WAAWxQ,IAAI,IAAIwd,IAAK,EAAK7C,cAC1CzC,GAAY,GAAK,EAAK6C,uBAAuB,aA9DnC,SAACrJ,EAAmBC,EAAoBC,EAAqBC,EACjFwC,EAAYvC,EAAiBC,EAAkBmD,EAAepU,EAAcC,GAC5E,OAAO,gBAAC0c,EAAD,CAAoB/L,aAAcA,EACrCC,cAAeA,EACfC,eAAgBA,EAChBC,eAAgBA,EAChBwC,MAAOA,EACPvC,WAAYA,EACZC,YAAaA,EACbmD,SAAUA,EACVpU,MAAOA,EACPC,OAAQA,IAmDyD2c,CAAkBhM,EAC/E,EAAKlS,MAAMmS,cAAe,EAAKnS,MAAMoS,eAAgB,EAAKpS,MAAMqS,eAAgB,EAAKrS,MAAM6U,MAC3F,EAAK5V,MAAMqT,WAAY,EAAKrT,MAAMsT,YAAa,EAAKvS,MAAM2b,UAC1D,EAAKJ,uBAAuB,aAA5B,MACA,EAAKA,uBAAuB,aAA5B,QAAoD,6BAEpD,uBAAKvK,UAAU,WAAWxQ,IAAI,IAAIwd,IAAK,EAAK5C,iBArD7B,SAAC1C,EAAoBxG,EAAmBC,EAAoBC,GAEnF,IAAI0H,EAAwB,GACxBU,EAAyB,GAiB7B,OAhBI9B,GAAc,IACsB,IAAhCxG,EAAaiB,QAAQvP,QACrBkW,EAAe7H,KAAK,gBAEF,OAAlBE,IACA2H,EAAiBA,EAAe1E,OAAOf,OAAOC,KAAKnC,KAKvDqI,EAAkBnG,OAAOC,KAAKpC,EAAaqC,UACpB,OAAnBnC,IACAoI,EAAkBA,EAAgBpF,OAAOf,OAAOC,KAAKlC,MAItD,gBAAC+L,GAAD,CAAuBrE,eAAgBA,EAAgBU,gBAAiBA,IAkClE4D,CAAqB1F,EAAYxG,EAAc,EAAKlS,MAAMmS,cAAe,EAAKnS,MAAMoS,mBAO9FiM,O,GAnSuBzd,aCRvBG,gBAbS,SAACf,GAAD,MAAwB,CAC5C0Y,WAAa1Y,EAAM0Y,WACnBpG,WAAatS,EAAMsS,WACnBC,YAAavS,EAAMuS,gBAII,SAACvR,GAAD,MAAyB,CAChDH,0BAA2B,SAACC,GAAD,OAAkCE,EAASH,EAA0BC,QAKrFC,CAA6Cma,ICdpDoD,GAAoBC,IAApBD,QAASE,GAAWD,IAAXC,OA+EFC,G,kDAnEb,WAAYxf,GAAe,IAAD,8BACtB,cAAMA,IAFHyf,gBACmB,EAEtB,EAAKA,WAAa9d,IAAM+d,YACxB,EAAKC,SAAW,EAAKA,SAASxZ,KAAd,gBAChB,EAAKpF,MAAQ,CACTqd,aAAe,EACfD,cAAe,EACftB,aAAc,EACdD,YAAa,GARK,E,mDAY1B,WACE,IAAIwB,EAAsB,EACtBD,EAAuB,EAK3B,OAJGnd,KAAKye,aACNrB,EAAepd,KAAKye,WAAW5B,QAAQC,YACvCK,EAAgBnd,KAAKye,WAAW5B,QAAQE,cAEnC,CACLK,aAAaA,EACbD,cAAcA,K,sBAGlB,WACEnd,KAAK4e,sB,+BAER,WACG,IAAIC,EAAgB7e,KAAK8e,kBACrB1B,EAAeyB,EAAczB,aAC7BD,EAAgB0B,EAAc1B,cAEnCnd,KAAK8b,SAAS,CACXsB,aAAaA,EACbD,cAAcA,EACbtB,aAAcpE,OAAOuE,YACrBJ,YAAanE,OAAOwE,e,+BAG1B,WACGxE,OAAOsH,iBAAiB,SAAU/e,KAAK2e,UACvC3e,KAAK4e,sB,gCAER,SAAmBvZ,EAAkBC,M,oBAIpC,WACE,MAA+DtF,KAAKD,MAApCqd,GAAhC,EAAKxB,YAAL,EAAkBC,aAAlB,EAAgCuB,cAAcD,EAA9C,EAA8CA,cAC9C,OACE,kBAAC,IAAD,CAAQpM,UAAU,OACd,kBAACwN,GAAD,CAAQxN,UAAU,aAAlB,SAEQ,yBAAKiO,IAAKC,IAAMlO,UAAU,UAAUmO,WAAS,UAErD,kBAACb,GAAD,CAAStN,UAAU,cACf,yBAAKpH,MAAO,CAAE,OAAU,OAAQ,MAAQ,QAAUoU,IAAK/d,KAAKye,YACxDrB,EAAa,GAAKD,EAAe,EAAG,kBAACgC,GAAD,CAAmB/B,aAAcA,EAAcD,cAAeA,IAAiB,+BAEvH,yBAAKjU,GAAG,iBACR,yBAAKA,GAAG,yB,GA9DJvI,IAAMye,WCNJC,QACW,cAA7B5H,OAAOC,SAAS4H,UAEe,UAA7B7H,OAAOC,SAAS4H,UAEhB7H,OAAOC,SAAS4H,SAASC,MACvB,2D,cCbAC,GAA6B,CAC/B/G,WAAa,KACbgH,cAAe,EACfhO,YAAY,EACZ+H,YAAa,GACbkG,QAAS,GACTnN,mBAAoB,GACpB8E,iCAAkC,GAClC1B,mBAAoB,GACpBnD,oBAAsB,EACtBpB,cAAe,KACfsE,aAAa,EACbvV,gCAA+B,EAC/BT,eAAe,CACbE,uBAAsB,EACtBE,iBAAgB,GAGlBuS,WAAY,GAEZC,YAAa,GACbzR,qBAAqB,GCfnB8e,I,cAAQC,cDkBC,WAAoD,IAAnD7f,EAAkD,uDAA1Cyf,GAAeK,EAA2B,uCAE9D,OAAQA,EAAOrf,MACb,IvBhC2B,oBuBkCzB,OAAO,2BACFT,GADL,IAEE0Y,WAAYoH,EAAOpH,aAEvB,IvBnC2B,oBuBqCzB,OAAO,2BACF1Y,GADL,IAEEyZ,YAAaqG,EAAOrG,cAExB,IvBnCuB,gBuBqCrB,OAAO,2BACFzZ,GADL,IAEEsS,WAAYwN,EAAOxN,aAEvB,IvB5CwB,iBuB8CtB,OAAO,2BACFtS,GADL,IAEEuS,YAAauN,EAAOvN,cAExB,IvB5CsC,+BuB8CpC,OAAO,2BACFvS,GADL,IAEEwS,mBAAoBsN,EAAOtN,qBAE/B,IvB/C4B,qBuBgD1B,OAAO,2BACFxS,GADL,IAEE0R,WAAYoO,EAAOpO,aAEvB,IvBjDsC,+BuBmDpC,OAAO,2BACF1R,GADL,IAEE4V,mBAAoBkK,EAAOlK,qBAE/B,IvBnDoC,6BuBqDlC,OAAO,2BACF5V,GADL,IAEEyS,oBAAqBqN,EAAOrN,sBAEhC,IvBlDuB,gBuBmDrB,OAAO,2BACFzS,GADL,IAEE2f,QAAS,GACTnN,mBAAoB,GACpB8E,iCAAkC,GAClC1B,mBAAoB,GACpBnD,oBAAsB,IAE1B,IvB/DgC,yBuBgE9B,OAAO,2BACFzS,GADL,IAEEqR,cAAeyO,EAAOzO,gBAE1B,IvB1D8C,uCuB2D5C,OAAO,2BACFrR,GADL,IAEEI,+BAAgC0f,EAAO1f,iCAE3C,IvB5D+B,wBuB6D7B,OAAO,2BACFJ,GADL,IAEEL,eAAgBmgB,EAAOngB,iBAE3B,IvBvE8B,uBuBwE1B,OAAO,2BACFK,GADL,IAEE2V,aAAcmK,EAAOnK,eAE3B,IvBnEsC,+BuBoElC,OAAO,2BACF3V,GADL,IAEEc,oBAAqBgf,EAAOhf,sBAElC,QACE,OAAOd,OCrGf+f,IAASC,OACL,kBAAC,IAAD,CAAUJ,MAAQA,IACd,kBAAC,GAAD,OAEFK,SAASC,eAAe,SF0HxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.be1c2be6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo2.4b8ec5cf.png\";","// Color Helper\r\n\r\nconst d3_10color = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\", \"#e377c2\", \"#7f7f7f\", \"#bcbd22\", \"#17becf\"];\r\nconst color_brewer1 = [\"#fbb4ae\",\"#b3cde3\", \"#ccebc5\",\"#decbe4\",\"#fed9a6\",\"#ffffcc\",\"#e5d8bd\",\"#fddaec\"];\r\nconst color_brewer2 = [\"#b3e2cd\",\"#fdcdac\", \"#cbd5e8\", \"#f4cae4\", \"#e6f5c9\", \"#fff2ae\", \"#f1e2cc\", \"#cccccc\"];\r\nconst COLORS: string[] = [\r\n    \"#1A7AB1\",\r\n    \"#ADC8E6\",\r\n    \"#FF772D\",\r\n    \"#FFB87F\",\r\n    \"#2AA13A\",\r\n    \"#98E090\",\r\n    \"#FF9398\",\r\n    \"#9467B9\",\r\n    \"#C5B0D3\",\r\n    \"#C49B95\",\r\n    \"#E474C0\",\r\n    \"#F7B4D1\",\r\n    \"#BCBC3D\",\r\n    \"#07C1CD\"\r\n    ]\r\n\r\nconst GREEN: string[] = [\r\n    \"#498B77\",\r\n    \"#89C2AE\",\r\n    \"#C1D6D3\"\r\n]\r\nconst BLUE: string[] = [\r\n    \"#3E97C7\",\r\n    \"#72B3CF\",\r\n    \"#8FCCDD\",\r\n    \"#C8DADE\"\r\n\r\n]\r\nconst ORANGE: string[] = [\r\n    \"#E96206\",\r\n    \"#F79143\",\r\n    \"#F6AD76\",\r\n    \"#F7CEA7\"\r\n]\r\nconst PINK: string[] = [\r\n    \"#F6B1C3\",\r\n    \"#F07F93\",\r\n    \"#DE4863\",\r\n    \"#BC0F46\"\r\n\r\n]\r\nconst RED: string[] = [\"#DC143C\"];\r\nconst YELLOW : string[] = ['#fee08b'];\r\nconst GRAY: string[] = ['#999999'];\r\nconst getLinearColor = (ColorList: string[], step:number) => {\r\n    let totalColor = ColorList.length;\r\n    let divide = 1/ (totalColor - 1);\r\n    let location = Math.floor(step / divide);\r\n    if(location == totalColor - 1){\r\n        location = location - 1;\r\n    }\r\n    let offset = step - location * divide;\r\n    let adjusted_offset = offset / divide;\r\n    return getGradientColor(ColorList[location], ColorList[location+1], adjusted_offset);\r\n}\r\nconst getGradientColor = (startColor : string,endColor :string,step : number) => {\r\n    let colorRgb = (sColor : string)=>{\r\n        var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;\r\n        var sColor = sColor.toLowerCase();\r\n        if(sColor && reg.test(sColor)){\r\n            if(sColor.length === 4){\r\n                var sColorNew = \"#\";\r\n                for(var i=1; i<4; i+=1){\r\n                    sColorNew += sColor.slice(i,i+1).concat(sColor.slice(i,i+1));\r\n                }\r\n                sColor = sColorNew;\r\n            }\r\n            var sColorChange = [];\r\n            for(var i=1; i<7; i+=2){\r\n                sColorChange.push(parseInt(\"0x\"+sColor.slice(i,i+2)));\r\n            }\r\n            return sColorChange;\r\n        }else{\r\n            return sColor;\r\n        }\r\n    };\r\n    startColor = startColor.replace(/\\s+/g,\"\");\r\n    endColor = endColor.replace(/\\s+/g,\"\");\r\n    let startRGB : any = colorRgb(startColor);//转换为rgb数组模式\r\n    //console.log(startRGB);\r\n    let startR = startRGB[0];\r\n    let startG = startRGB[1];\r\n    let startB = startRGB[2];\r\n\r\n    let endRGB : any = colorRgb(endColor);\r\n    //console.log(endRGB);\r\n\r\n    let endR = endRGB[0];\r\n    let endG = endRGB[1];\r\n    let endB = endRGB[2];\r\n    if(step>1){\r\n        console.log(\"out of range step: \", step);\r\n        step = 1;\r\n    }else if(step<0){\r\n        console.log(\"out of range step: \", step);\r\n        step = 0;\r\n    }\r\n    let sR = (endR-startR)*step;//总差值\r\n    let sG = (endG-startG)*step;\r\n    let sB = (endB-startB)*step;\r\n    var R = parseInt((sR+startR));\r\n    var G = parseInt((sG+startG));\r\n    var B = parseInt((sB+startB));\r\n    var strHex = \"#\";\r\n    var aColor = new Array();\r\n    aColor[0] = R;\r\n    aColor[1] = G;\r\n    aColor[2] = B;\r\n    for(let j=0; j<3; j++){\r\n        let hex : string = Number(aColor[j]).toString(16);\r\n        let shex : string = Number(aColor[j])<10 ? '0'+hex :hex;\r\n        if(shex === \"0\"){\r\n            shex += shex;\r\n        }\r\n        strHex += shex;\r\n    }\r\n    return strHex;\r\n}\r\n\r\n\r\nconst EChartsColor = [\r\n    \"#c23531\",\r\n    \"#2f4554\",\r\n    \"#61a0a8\",\r\n    \"#d48265\",\r\n    \"#91c7ae\",\r\n    \"#749f83\"\r\n]\r\n\r\nconst DefaultColor = BLUE[1];\r\nconst StartColor = BLUE[0];\r\nconst EndColor = RED[0];\r\nconst getNodeColor = ( node_label:number,color_encode:number = 2) =>{\r\n    if(color_encode === 1 || color_encode === 2 || color_encode === 3){\r\n        return d3_10color[node_label];\r\n    }else if(color_encode === 5){\r\n        if(node_label){\r\n            return GREEN[0];\r\n        }else{\r\n            return RED[0];\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n// Transform Data Helper\r\n\r\n// Construct Graph In from Graph obj\r\nfunction constructGraphIn(graph_obj:any){\r\n    let senders = graph_obj.srcs;\r\n    let receivers = graph_obj.dsts;\r\n    let num_nodes = graph_obj.num_nodes;\r\n    return {\r\n        \"senders\":senders,\r\n        \"receivers\":receivers,\r\n        \"num_nodes\":num_nodes\r\n    }\r\n}\r\n\r\n\r\n// Construct Neighbor Set from Graph in. \r\nfunction constructNeighborSet(graph_in:any){\r\n    // Input: Graph_in\r\n    //   senders:  source of edges.\r\n    //   receivers:   target of edges.\r\n    //   node_num:  number of nodes.\r\n    // Output: \r\n    //   NeighborSet: Dict[Key] <-- incoming neighbors.\r\n    let senders = graph_in.senders;\r\n    let receivers = graph_in.receivers;\r\n    let node_num = graph_in.num_nodes;\r\n    let NeighborSet:any = {};\r\n    for(let i = 0; i<node_num ;i++){\r\n        NeighborSet[i] = [];\r\n    }\r\n    for(let i = 0; i< receivers.length; i++){\r\n        let nowreceiver = receivers[i];\r\n        if(nowreceiver in NeighborSet){\r\n        }else{\r\n            NeighborSet[nowreceiver] = []\r\n        }\r\n        NeighborSet[nowreceiver].push(senders[i]);\r\n    }\r\n    return NeighborSet;\r\n}\r\nfunction constructPathDict(message_passing:any){\r\n    let senders = message_passing.senders;\r\n    let receivers = message_passing.receivers;\r\n    let values = message_passing.values;\r\n    let PathDict:any = {};\r\n    for(let i = 0; i< receivers.length; i++){\r\n        let nowreceiver = receivers[i];\r\n        if(nowreceiver in PathDict){\r\n        }else{\r\n            PathDict[nowreceiver] = {}\r\n        }\r\n        PathDict[nowreceiver][senders[i]] = values[i];\r\n    }\r\n    return PathDict;\r\n}\r\nfunction getTrainColor(node_id:any, train_set:any){\r\n    if(train_set.has(node_id)){\r\n        //return \"#fff\";\r\n        return \"#000\";\r\n    }else{\r\n        return \"#fff\";\r\n    }\r\n}\r\nfunction getNodeStatisticStr(selectedNodeLength: number, totalNodeLength: number){\r\n    let str : string = \"\" + selectedNodeLength + \"/\"+ totalNodeLength;\r\n    let percentage : number ;\r\n    if(totalNodeLength === 0){\r\n\r\n    }else{\r\n        percentage = selectedNodeLength / totalNodeLength * 100;\r\n        str = str + \" (\" + percentage.toFixed(2) +\"%)\"\r\n    }\r\n    return str;\r\n}\r\n\r\n\r\nfunction compareSelectedNodeIdList(list_a:any, list_b:any){\r\n    if(list_a.length === list_b.length){\r\n        for(let i = 0; i<list_a.length; i++){\r\n            if(list_a[i] === list_b[i]){\r\n\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }else{\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction get_boundingbox(graph_layout:any[]){\r\n    if(graph_layout.length === 0){\r\n        return {\r\n            \"xmin\":0,\r\n            \"xmax\":0,\r\n            \"ymin\":0,\r\n            \"ymax\":0\r\n        }\r\n    }else{\r\n        let xmin = graph_layout[0][0];\r\n        let xmax = graph_layout[0][0];\r\n        let ymin = graph_layout[0][1];\r\n        let ymax = graph_layout[0][1];\r\n        for(let i = 0; i< graph_layout.length; i++){\r\n            let nowx = graph_layout[i][0];\r\n            let nowy = graph_layout[i][1];\r\n            if(xmin > nowx){\r\n                xmin = nowx;\r\n            }\r\n            if(xmax < nowx){\r\n                xmax = nowx;\r\n            }\r\n            if(ymin > nowy){\r\n                ymin = nowy;\r\n            }\r\n            if(ymax < nowy){\r\n                ymax = nowy;\r\n            }\r\n        }\r\n        return {\r\n            \"xmin\":xmin,\r\n            \"xmax\":xmax,\r\n            \"ymin\":ymin,\r\n            \"ymax\":ymax\r\n        }\r\n    }\r\n}\r\nfunction transform_graphlayout(graph_layout:any[], width:number, height:number){\r\n    if(graph_layout.length === 0){\r\n        return graph_layout;\r\n    }else{\r\n        let bounding_box = get_boundingbox(graph_layout);\r\n        //let canvas_centerx = 300;\r\n        //let canvas_centery = 300;\r\n        //let width = Swidth;\r\n        //let height = Sheight;\r\n        let margin = 20;\r\n        if(graph_layout.length >= 100){\r\n            margin = 20;\r\n        }\r\n        \r\n        let realwidth = width - 2*margin;\r\n        let realheight = height - 2*margin;\r\n        let gap_x = bounding_box[\"xmax\"] - bounding_box[\"xmin\"];\r\n        let gap_y = bounding_box[\"ymax\"] - bounding_box[\"ymin\"];\r\n        if(gap_x === 0){\r\n            gap_x = 1e-16;\r\n        }\r\n        if(gap_y === 0){\r\n            gap_y = 1e-16;\r\n        }\r\n        let realscale = Math.min(realwidth / gap_x, realheight / gap_y);\r\n        let left = margin + (realwidth - realscale * gap_x) / 2;\r\n        let top = margin + (realheight - realscale * gap_y) / 2; \r\n        let xmin = bounding_box[\"xmin\"];\r\n        let ymin = bounding_box[\"ymin\"];\r\n        let new_graph_layout = [];\r\n        for(let i = 0; i< graph_layout.length; i++){\r\n            let nowx = graph_layout[i][0];\r\n            let nowy = graph_layout[i][1];\r\n            let locx = left+ (nowx - xmin) * realscale;\r\n            let locy = top + (nowy - ymin) * realscale;\r\n            new_graph_layout.push([locx,locy]);\r\n        }\r\n        return new_graph_layout;\r\n    }\r\n}\r\nfunction skew_weight(weight:any, range_min:any=0.1, range_max:any=1){\r\n    // Assume weight is [0,1]\r\n    return (weight - 0) * 0.9 + range_min;\r\n}\r\n\r\n\r\n\r\nexport { RED,YELLOW, EChartsColor,   getNodeColor, constructNeighborSet,  constructPathDict,getTrainColor, \r\n     compareSelectedNodeIdList,getNodeStatisticStr,constructGraphIn,transform_graphlayout,skew_weight }\r\n","import * as React from \"react\";\r\nimport { Modal, Select, Button, Checkbox } from 'antd';\r\nexport interface IProps {\r\n    GraphViewSettingsModal_visible: any,\r\n    changeGraphViewSettingsModal_visible:any,\r\n    GraphViewState:any,\r\n    changeGraphViewState:any\r\n}\r\nexport interface IState {\r\n}\r\nexport default class GraphViewSettingsModal extends React.Component<IProps, IState>{\r\n    constructor(props:IProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        }\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    handleOk = (e:any) => {\r\n        console.log(e);\r\n        this.props.changeGraphViewSettingsModal_visible(false);\r\n      };\r\n    \r\n    handleCancel = (e:any) => {\r\n        console.log(e);\r\n        this.props.changeGraphViewSettingsModal_visible(false);\r\n      };\r\n    handleUnfocusedNodesChange = (e:any) =>{\r\n      let checked = e.target.checked;\r\n      let GraphViewState = this.props.GraphViewState;\r\n      this.props.changeGraphViewState({\r\n        ...GraphViewState,\r\n        DisplayUnfocusedNodes: checked\r\n      })\r\n    }\r\n    handleOverviewChange = (e:any) =>{\r\n      let checked = e.target.checked;\r\n      let GraphViewState = this.props.GraphViewState;\r\n      this.props.changeGraphViewState({\r\n        ...GraphViewState,\r\n        DisplayOverview: checked\r\n      })\r\n    }\r\n    public render() {\r\n        /**\r\n         * 1. Show Overview of Graph?\r\n               2. Show background?\r\n               3. Show color legend?\r\n               4. Show glyph legend?\r\n               5. Extended?\r\n               6. Max Node Settings?\r\n         */\r\n        let GraphViewState = this.props.GraphViewState;\r\n        return  (      \r\n        <Modal\r\n            title=\"Graph View Settings\"\r\n            visible={this.props.GraphViewSettingsModal_visible}\r\n            onOk={this.handleOk}\r\n            onCancel={this.handleCancel}\r\n            footer={[\r\n                <Button key=\"OK\" type=\"primary\" onClick={this.handleOk}>\r\n                  OK\r\n                </Button>\r\n              ]}\r\n        >\r\n          \r\n              Rendering Options:\r\n              <div>\r\n                <Checkbox checked={GraphViewState.DisplayUnfocusedNodes} onChange={this.handleUnfocusedNodesChange}>Display unfocused nodes.</Checkbox>\r\n                <br />\r\n                <Checkbox checked={GraphViewState.DisplayOverview} onChange={this.handleOverviewChange}>Display overview.</Checkbox>\r\n              </div>\r\n              \r\n               \r\n               \r\n        </Modal>)\r\n    }\r\n}\r\n\r\n","import { DATASET_ID_CHANGE, INIT_DATASET_LIST, \r\n    SELECTED_NODE_ID_LIST_CHANGE, \r\n    SHOW_SOURCE_CHANGE, SPECIFIC_NODE_ID_LIST_CHANGE, SELECT_INSPECT_NODE_CHANGE,\r\n    CLEAR_ID_INFO,  PREV_GRAPH_JSON_CHANGE, EXTENDED_MODE_CHANGE, GRAPHVIEWSETTINGMODAL_VISIBLE_CHANGE,GRAPHVIEWSTATE_CHANGE, \r\n    NLABEL_CHANGE, EWEIGHT_CHANGE, ENABLE_FORCE_DIRECTED_CHANGE} from '../constants';\r\n\r\nexport const changeDataset = (dataset_id:number | null) =>({\r\n    type: DATASET_ID_CHANGE,\r\n    dataset_id: dataset_id\r\n})\r\n\r\nexport const changeSelectedNodeIdList = (selectedNodeIdList: any) =>({\r\n    type: SELECTED_NODE_ID_LIST_CHANGE,\r\n    selectedNodeIdList: selectedNodeIdList\r\n})\r\nexport const changeExtendedMode = (extendedMode: number) =>({\r\n    type: EXTENDED_MODE_CHANGE,\r\n    extendedMode: extendedMode\r\n})\r\nexport const changeGraphViewSettingsModal_visible = (visible:boolean) =>({\r\n    type: GRAPHVIEWSETTINGMODAL_VISIBLE_CHANGE,\r\n    GraphViewSettingsModal_visible: visible\r\n})\r\nexport const changeGraphViewState = (state_dict:any) =>({\r\n    type: GRAPHVIEWSTATE_CHANGE,\r\n    GraphViewState: state_dict\r\n})\r\nexport const changeEnableForceDirected = (enableForceDirected:any) =>({\r\n    type: ENABLE_FORCE_DIRECTED_CHANGE,\r\n    enableForceDirected: enableForceDirected\r\n})\r\n\r\n\r\nexport const changeSpecificNodeIdList = (specificNodeIdList: any) =>({\r\n    type: SPECIFIC_NODE_ID_LIST_CHANGE,\r\n    specificNodeIdList: specificNodeIdList\r\n})\r\n\r\nexport const changeSelectInspectNode = (select_inspect_node:any)=>({\r\n    type: SELECT_INSPECT_NODE_CHANGE,\r\n    select_inspect_node: select_inspect_node\r\n})\r\n\r\nexport const changeShowSource = (showSource: boolean) =>({\r\n    type: SHOW_SOURCE_CHANGE,\r\n    showSource: showSource\r\n})\r\nexport const changePrevGraphJson = (prevGraphJson: any) =>({\r\n    type: PREV_GRAPH_JSON_CHANGE,\r\n    prevGraphJson: prevGraphJson\r\n})\r\n\r\nexport const clearIdInfo = () =>({\r\n    type: CLEAR_ID_INFO\r\n})\r\n\r\nexport const initDatasetList = (datasetList:any) =>({\r\n    type: INIT_DATASET_LIST,\r\n    datasetList: datasetList\r\n})\r\n\r\nexport const changeNLabel = (NLabelList: any) =>({\r\n    type: NLABEL_CHANGE,\r\n    NLabelList: NLabelList\r\n})\r\n\r\nexport const changeEWeight = (eweightList: any) =>({\r\n    type: EWEIGHT_CHANGE,\r\n    eweightList: eweightList\r\n})\r\n\r\n","export const DATASET_ID_CHANGE = \"DATASET_ID_CHANGE\";\r\nexport type DATASET_ID_CHANGE = typeof DATASET_ID_CHANGE;\r\n\r\nexport const INIT_DATASET_LIST = \"INIT_DATASET_LIST\";\r\nexport type INIT_DATASET_LIST = typeof INIT_DATASET_LIST;\r\n\r\nexport const EWEIGHT_CHANGE = \"EWEIGHT_CHANGE\";\r\nexport type EWEIGHT_CHANGE = typeof EWEIGHT_CHANGE;\r\n\r\nexport const NLABEL_CHANGE = \"NLABEL_CHANGE\";\r\nexport type NLABEL_CHANGE = typeof NLABEL_CHANGE;\r\n\r\nexport const SELECTED_NODE_ID_LIST_CHANGE = \"SELECTED_NODE_ID_LIST_CHANGE\";\r\nexport type SELECTED_NODE_ID_LIST_CHANGE = typeof SELECTED_NODE_ID_LIST_CHANGE;\r\n\r\nexport const SHOW_SOURCE_CHANGE = \"SHOW_SOURCE_CHANGE\";\r\nexport type SHOW_SOURCE_CHANGE = typeof SHOW_SOURCE_CHANGE;\r\n\r\nexport const SPECIFIC_NODE_ID_LIST_CHANGE = \"SPECIFIC_NODE_ID_LIST_CHANGE\";\r\nexport type SPECIFIC_NODE_ID_LIST_CHANGE = typeof SPECIFIC_NODE_ID_LIST_CHANGE;\r\n\r\n\r\nexport const SELECT_INSPECT_NODE_CHANGE = \"SELECT_INSPECT_NODE_CHANGE\";\r\nexport type SELECT_INSPECT_NODE_CHANGE = typeof SELECT_INSPECT_NODE_CHANGE;\r\n\r\nexport const PREV_GRAPH_JSON_CHANGE = \"PREV_GRAPH_JSON_CHANGE\";\r\nexport type PREV_GRAPH_JSON_CHANGE = typeof PREV_GRAPH_JSON_CHANGE;\r\n\r\n\r\nexport const CLEAR_ID_INFO = \"CLEAR_ID_INFO\";\r\nexport type CLEAR_ID_INFO = typeof CLEAR_ID_INFO;\r\n\r\nexport const EXTENDED_MODE_CHANGE = \"EXTENDED_MODE_CHANGE\";\r\nexport type EXTENDED_MODE_CHANGE = typeof EXTENDED_MODE_CHANGE;\r\n\r\nexport const GRAPHVIEWSETTINGMODAL_VISIBLE_CHANGE = \"GRAPHVIEWSETTINGMODAL_VISIBLE_CHANGE\";\r\nexport type GRAPHVIEWSETTINGMODAL_VISIBLE_CHANGE = typeof GRAPHVIEWSETTINGMODAL_VISIBLE_CHANGE;\r\n\r\nexport const GRAPHVIEWSTATE_CHANGE = \"GRAPHVIEWSTATE_CHANGE\";\r\nexport type GRAPHVIEWSTATE_CHANGE = typeof GRAPHVIEWSTATE_CHANGE;\r\n\r\nexport const ENABLE_FORCE_DIRECTED_CHANGE = \"ENABLE_FORCE_DIRECTED_CHANGE\";\r\nexport type ENABLE_FORCE_DIRECTED_CHANGE = typeof ENABLE_FORCE_DIRECTED_CHANGE;\r\n\r\n\r\n/*// 定义增加 state 类型常量\r\nexport const INCREMENT = \"INCREMENT\";\r\nexport type INCREMENT = typeof INCREMENT;\r\n\r\n// 定义减少 state 类型常量\r\nexport const DECREMENT = \"DECREMENT\";\r\nexport type DECREMENT = typeof DECREMENT;\r\n*/","import { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { StoreState } from '../types';\r\nimport GraphViewSettingsModal from '../components/DataRuns/GraphView/GraphViewSettingsModal';\r\nimport { changeGraphViewSettingsModal_visible,changeGraphViewState } from '../actions';\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    GraphViewSettingsModal_visible: state.GraphViewSettingsModal_visible,\r\n    GraphViewState: state.GraphViewState\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeGraphViewSettingsModal_visible: (visible:boolean) => dispatch(changeGraphViewSettingsModal_visible(visible)),\r\n    changeGraphViewState: (state_dict:any) => dispatch(changeGraphViewState(state_dict))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphViewSettingsModal);\r\n\r\n\r\n\r\n","import { color } from \"d3\";\r\n\r\n// Canvas Handle Function\r\nfunction drawRectStroke(context:any, x:any, y:any, width:any, height:any, strokeColor:any=\"#bbb\"){\r\n    context.beginPath();\r\n    context.strokeStyle = strokeColor;\r\n    context.rect(x, y, width, height);\r\n    context.stroke();\r\n}\r\nfunction drawRect(context:any, x:any, y:any, width:any, height:any, fillColor:any=\"#fff\", opacity:any=0.8){\r\n    context.fillStyle = fillColor;\r\n    context.globalAlpha = opacity;\r\n    context.fillRect(x, y, width, height);\r\n    context.globalAlpha = 1.0;\r\n}\r\nfunction drawCircleStroke(context:any, color:any, radius:any, x:any, y:any, lineWidth:number){\r\n    context.lineWidth = lineWidth\r\n    context.strokeStyle = color;\r\n    context.beginPath();\r\n    context.arc(x, y, radius, 0, 2 * Math.PI, true);\r\n    context.stroke();\r\n}\r\n\r\nfunction drawCircle(context:any, color:any, radius:any, x:any, y:any, alpha:any=1){\r\n    let original_globalAlpha = context.globalAlpha;\r\n    context.globalAlpha = alpha;\r\n    context.beginPath();\r\n    context.arc(x, y, radius, 0, 2 * Math.PI, true);\r\n    context.fillStyle = color;\r\n    context.fill();\r\n    context.globalAlpha = original_globalAlpha;\r\n\r\n}\r\n\r\nfunction drawOnePie(context:any, color:any, radius:any, x:any, y:any, startAngle:any, endAngle:any, alpha:any=1){\r\n    let original_globalAlpha = context.globalAlpha;\r\n    context.globalAlpha = alpha;\r\n    context.beginPath();\r\n    context.moveTo(x,y);\r\n    context.arc(x, y, radius, startAngle, endAngle);\r\n    context.fillStyle = color;\r\n    context.closePath();\r\n    context.fill();\r\n    context.globalAlpha = original_globalAlpha;\r\n\r\n}\r\nfunction drawOneArc(context:any, color:any, radius:any, x:any, y:any, startAngle:any, endAngle:any){\r\n    context.moveTo(x,y);\r\n    context.beginPath();\r\n    context.arc(x, y, radius, startAngle, endAngle);\r\n    context.strokeStyle = color;\r\n    context.stroke();\r\n}\r\n/*\r\n//Backup version\r\nfunction drawNodeGlyph(context:any, colorlist:any, inner_radius:any, radius:any, outer_radius:any, x:any, y:any, enableStroke:boolean=false){\r\n    \r\n    drawCircle(context, colorlist[4], outer_radius, x, y);\r\n    if(enableStroke){\r\n        drawCircleStroke(context, \"#000\", outer_radius, x, y, 2);\r\n    }\r\n    drawOnePie(context, colorlist[1], outer_radius, x, y, (-150)/180*Math.PI, (-30)/180*Math.PI);\r\n    drawOnePie(context, colorlist[2], outer_radius, x, y, (-30)/180*Math.PI, (+90)/180*Math.PI);\r\n    drawOnePie(context, colorlist[3], outer_radius, x, y, (+90)/180*Math.PI, (+210)/180*Math.PI);\r\n    for(let i = 0; i<3; i++){\r\n        let angle = (-150+120*i)/180*Math.PI;\r\n        let x1 = x + radius*Math.cos(angle);\r\n        let y1 = y + radius*Math.sin(angle);\r\n        let x2 = x + outer_radius*Math.cos(angle);\r\n        let y2 = y + outer_radius*Math.sin(angle);\r\n        // drawLine(context, \"#ddd\", x1, y1, x2 ,y2, 0.5);\r\n        drawLine(context, colorlist[4], x1, y1, x2 ,y2, radius-inner_radius);\r\n    }\r\n    drawCircle(context, colorlist[4], radius, x, y);\r\n    drawCircle(context, colorlist[0], inner_radius, x, y);\r\n}*/\r\n\r\n/*\r\nfunction drawNodeGlyph(context:any, colorlist:any, inner_radius:any, radius:any, outer_radius:any, x:any, y:any, \r\n    enableStroke:boolean=false, outer_arc_encoded_value:any=0.5, outer_arc_radius:any=2, enable_alpha_mode=true){\r\n    let value = outer_arc_encoded_value;\r\n    //let original_globalAlpha = context.globalAlpha;\r\n    if(value<0) value = 0;\r\n    else if(value>1) value = 1;\r\n    let alpha = 1;\r\n    if(enable_alpha_mode){\r\n        alpha = value;\r\n    }\r\n    \r\n    //context.globalAlpha = value;\r\n    drawCircle(context, colorlist[4], outer_radius, x, y, alpha);\r\n    if(enableStroke){\r\n        drawCircleStroke(context, \"#000\", outer_radius, x, y, 2);\r\n    }\r\n    \r\n    drawOnePie(context, colorlist[1], outer_radius, x, y, (-150)/180*Math.PI, (-30)/180*Math.PI, alpha);\r\n    drawOnePie(context, colorlist[2], outer_radius, x, y, (-30)/180*Math.PI, (+90)/180*Math.PI, alpha);\r\n    drawOnePie(context, colorlist[3], outer_radius, x, y, (+90)/180*Math.PI, (+210)/180*Math.PI, alpha);\r\n    for(let i = 0; i<3; i++){\r\n        let angle = (-150+120*i)/180*Math.PI;\r\n        let x1 = x + radius*Math.cos(angle);\r\n        let y1 = y + radius*Math.sin(angle);\r\n        let x2 = x + outer_radius*Math.cos(angle);\r\n        let y2 = y + outer_radius*Math.sin(angle);\r\n        // drawLine(context, \"#ddd\", x1, y1, x2 ,y2, 0.5);\r\n        drawLine(context, colorlist[4], x1, y1, x2 ,y2, radius-inner_radius, alpha);\r\n    }\r\n    drawCircle(context, colorlist[4], radius, x, y, alpha);\r\n    drawCircle(context, colorlist[0], inner_radius, x, y, alpha);\r\n    //context.globalAlpha = original_globalAlpha;\r\n\r\n    //let degree = 360 * value - 90;\r\n    //drawOneArc(context, colorlist[5], outer_arc_radius, x, y, (-90)/180*Math.PI, degree/180*Math.PI);\r\n}\r\n\r\nfunction drawNodeGlyph_v1(context:any, colorlist:any, inner_radius:any, radius:any, outer_radius:any, x:any, y:any, \r\n    enableStroke:boolean=false, outer_arc_encoded_value:any=0.5, outer_arc_radius:any=2, enable_alpha_mode=true){\r\n    let value = outer_arc_encoded_value;\r\n    if(value<0) value = 0;\r\n    else if(value>1) value = 1;\r\n    let alpha = 1;\r\n    if(enable_alpha_mode){\r\n        alpha = value;\r\n    }\r\n    if(enableStroke){\r\n        drawCircleStroke(context, \"#000\", outer_radius, x, y, 2);\r\n    }\r\n    drawCircle(context, colorlist[0], outer_radius, x, y, alpha);\r\n}\r\nfunction drawNodeGlyph(context:any, colorlist:any, inner_radius:any, radius:any, outer_radius:any, x:any, y:any, \r\n    enableStroke:boolean=false, outer_arc_encoded_value:any=0.5, outer_arc_radius:any=2, enable_alpha_mode=true){\r\n    let value = outer_arc_encoded_value;\r\n    //let original_globalAlpha = context.globalAlpha;\r\n    if(value<0) value = 0;\r\n    else if(value>1) value = 1;\r\n    let alpha = 1;\r\n    if(enable_alpha_mode){\r\n        alpha = value;\r\n    }\r\n    \r\n    //context.globalAlpha = value;\r\n    // Background circle\r\n    \r\n    \r\n    \r\n    // Pie chart drawing\r\n    let length_model = colorlist.length - 1;\r\n    if(length_model > 0){\r\n        drawCircle(context, \"#fff\", outer_radius, x, y, alpha);\r\n        if(enableStroke){\r\n            drawCircleStroke(context, \"#000\", outer_radius, x, y, 2);\r\n        }\r\n        let step_angle = 360 / length_model;\r\n        let current_angle = -90 - step_angle / 2; \r\n        for(let i = 1; i<colorlist.length; i++){\r\n            let start_angle = current_angle;\r\n            let end_angle = start_angle + step_angle;\r\n            drawOnePie(context, colorlist[i], outer_radius, x, y, (start_angle)/180*Math.PI, (end_angle)/180*Math.PI, alpha);\r\n            current_angle = end_angle;\r\n        }\r\n        if(length_model > 1){\r\n            current_angle = -90 - step_angle / 2;\r\n            for(let i = 1; i<colorlist.length; i++){\r\n                let angle = (current_angle)/180*Math.PI;\r\n                let x1 = x + radius*Math.cos(angle);\r\n                let y1 = y + radius*Math.sin(angle);\r\n                let x2 = x + outer_radius*Math.cos(angle);\r\n                let y2 = y + outer_radius*Math.sin(angle);\r\n                // drawLine(context, \"#ddd\", x1, y1, x2 ,y2, 0.5);\r\n                drawLine(context, \"#fff\", x1, y1, x2 ,y2, radius-inner_radius, alpha);\r\n                current_angle = current_angle + step_angle;\r\n            }\r\n        }\r\n        drawCircle(context, \"#fff\", radius, x, y, alpha);\r\n        drawCircle(context, colorlist[0], inner_radius, x, y, alpha);\r\n\r\n    }else{\r\n        drawCircle(context, colorlist[0], outer_radius, x, y, alpha);\r\n        if(enableStroke){\r\n            drawCircleStroke(context, \"#000\", outer_radius, x, y, 2);\r\n        }\r\n        //drawCircle(context, colorlist[0], radius, x, y, alpha);\r\n        //drawCircle(context, colorlist[0], inner_radius, x, y, alpha);\r\n    }\r\n    \r\n\r\n*/\r\n\r\nfunction drawNodeGlyph(context:any, colorlist:any, inner_radius:any, radius:any, outer_radius:any, x:any, y:any, \r\n    enableStroke:boolean=false, outer_arc_encoded_value:any=0.5, outer_arc_radius:any=2, enable_alpha_mode=true){\r\n    let value = outer_arc_encoded_value;\r\n    //let original_globalAlpha = context.globalAlpha;\r\n    if(value<0) value = 0;\r\n    else if(value>1) value = 1;\r\n    let alpha = 1;\r\n    if(enable_alpha_mode){\r\n        alpha = value;\r\n    }\r\n    \r\n    //context.globalAlpha = value;\r\n    // Background circle\r\n    \r\n    \r\n    \r\n    // Pie chart drawing\r\n    let length_model = colorlist.length - 1;\r\n    if(length_model > 0){\r\n        drawCircle(context, \"#fff\", outer_radius, x, y, alpha);\r\n        if(enableStroke){\r\n            drawCircleStroke(context, \"#000\", outer_radius, x, y, 2);\r\n        }\r\n        let step_angle = 360 / length_model;\r\n        let current_angle = -90 - step_angle / 2; \r\n        for(let i = 1; i<colorlist.length; i++){\r\n            let start_angle = current_angle;\r\n            let end_angle = start_angle + step_angle;\r\n            drawOnePie(context, colorlist[i], outer_radius, x, y, (start_angle)/180*Math.PI, (end_angle)/180*Math.PI, alpha);\r\n            current_angle = end_angle;\r\n        }\r\n        if(length_model > 1){\r\n            current_angle = -90 - step_angle / 2;\r\n            for(let i = 1; i<colorlist.length; i++){\r\n                let angle = (current_angle)/180*Math.PI;\r\n                let x1 = x + radius*Math.cos(angle);\r\n                let y1 = y + radius*Math.sin(angle);\r\n                let x2 = x + outer_radius*Math.cos(angle);\r\n                let y2 = y + outer_radius*Math.sin(angle);\r\n                // drawLine(context, \"#ddd\", x1, y1, x2 ,y2, 0.5);\r\n                drawLine(context, \"#fff\", x1, y1, x2 ,y2, radius-inner_radius, alpha);\r\n                current_angle = current_angle + step_angle;\r\n            }\r\n        }\r\n        drawCircle(context, \"#fff\", radius, x, y, alpha);\r\n        drawCircle(context, colorlist[0], inner_radius, x, y, alpha);\r\n\r\n    }else{\r\n        drawCircle(context, colorlist[0], outer_radius, x, y, alpha);\r\n        if(enableStroke){\r\n            drawCircleStroke(context, \"#000\", outer_radius, x, y, 2);\r\n        }\r\n        //drawCircle(context, colorlist[0], radius, x, y, alpha);\r\n        //drawCircle(context, colorlist[0], inner_radius, x, y, alpha);\r\n    }\r\n    \r\n\r\n    \r\n    //context.globalAlpha = original_globalAlpha;\r\n\r\n    //let degree = 360 * value - 90;\r\n    //drawOneArc(context, colorlist[5], outer_arc_radius, x, y, (-90)/180*Math.PI, degree/180*Math.PI);\r\n}\r\nfunction drawLine(context:any, color:any, x1:any, y1:any, x2:any, y2:any, linewidth:any=null, weight:any=1){\r\n    let original_globalAlpha = context.globalAlpha;\r\n    let value = weight;\r\n    if(value<0) value = 0;\r\n    else if(value>1) value = 1;\r\n    context.globalAlpha = value;\r\n    context.strokeStyle = color;\r\n    if(linewidth){\r\n        context.lineWidth = linewidth;\r\n    }\r\n    context.beginPath();\r\n    context.moveTo(x1, y1);\r\n    context.lineTo(x2, y2);\r\n    context.stroke();\r\n    context.globalAlpha = original_globalAlpha;\r\n}\r\n\r\nexport {drawRectStroke, drawRect, drawCircleStroke, \r\n    drawCircle, drawOnePie, drawOneArc, drawNodeGlyph, drawLine }\r\n","\r\nimport './ForceDirectedGraphCanvas.css'\r\nimport * as React from \"react\";\r\nimport {drawRectStroke, drawRect, drawNodeGlyph, drawLine} from './CanvasDrawing';\r\nconst d3 = require(\"d3\");\r\n\r\nexport interface IProps {\r\n    graph_json : any,\r\n    width : number,\r\n    height : number,\r\n    onNodeClick: any,\r\n    GraphViewState:any,\r\n    UpdateCurrentGraphJson:any\r\n}\r\nexport interface IState {\r\n}\r\n\r\nexport default class ForceDirectedGraphCanvas extends React.Component<IProps, IState>{\r\n    public global_simulation:any = null;\r\n    public saved_transform:any = null;\r\n    public refresh_number = 0;\r\n    public current_graph_json:any = null;\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.updateTransform = this.updateTransform.bind(this);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.renderCanvas();\r\n    }\r\n    \r\n    componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n        if(prevProps.graph_json.name !== this.props.graph_json.name || prevProps.width !== this.props.width || prevProps.GraphViewState !== this.props.GraphViewState){\r\n            this.renderCanvas();\r\n        }\r\n     }\r\n     public updateTransform(transform:any){\r\n         this.saved_transform = transform;\r\n     }\r\n     // Render Legend Function.\r\n     public renderLegend(legend_configuration:any){\r\n        var width = legend_configuration[\"width\"];\r\n        var height = legend_configuration[\"height\"];\r\n        var colorLegend = legend_configuration[\"colorLegend\"];\r\n        // ---------------- Color Legend -------------------------//\r\n        let legend_pie_y = height - 10 - 100;\r\n        var top_svg = d3.select(\"#force_directed_graph\")\r\n                .select(\"#svgChart\")\r\n                .attr(\"width\", width)\r\n                .attr(\"height\", height);\r\n        let legend_color_x = 10;\r\n        let max_text_length = 0;\r\n        colorLegend.forEach((d:any)=>{\r\n            let text = \"\" + d.text;\r\n            if(text.length>max_text_length){\r\n                max_text_length = text.length;\r\n            }\r\n        })\r\n\r\n        let legend_color_width = max_text_length*8+24;\r\n        //console.log(\"maxtextlength\", max_text_length, legend_color_width);\r\n        let legend_color_height = colorLegend.length*20;\r\n        let legend_color_y = legend_pie_y - legend_color_height - 10;\r\n        var legend_color_svg = top_svg.select(\"#ForceDirectedColorLegend\")\r\n            .attr(\"width\", legend_color_width)\r\n            .attr(\"height\", legend_color_height)\r\n            .attr(\"transform\", \"translate(\"+legend_color_x+\",\"+legend_color_y+\")\")\r\n        let legend_rect = legend_color_svg.selectAll(\"rect\").data([0]);\r\n        let legend_rect_enter = legend_rect.enter().append(\"rect\");\r\n        //console.log(\"legend_rect\", legend_rect);\r\n        legend_rect_enter.merge(legend_rect)\r\n            .attr(\"x\", 0)\r\n            .attr(\"y\", 0)\r\n            .attr(\"width\", legend_color_width)\r\n            .attr(\"height\", legend_color_height)\r\n            .attr(\"fill\", \"#fff\")\r\n            .attr(\"opacity\", 0.8)\r\n            .attr(\"stroke\", \"#bbb\")\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"rx\",3)\r\n            .attr(\"ry\",3);\r\n        let row_legend_color = legend_color_svg.selectAll(\"g.legend_row_color\")\r\n                                .data(colorLegend, function(d:any,i:any){\r\n                                    return d.text+\"_\"+i+\"_\"+d.color;\r\n                                });\r\n        let g_row_legend_color = row_legend_color.enter().append(\"g\")\r\n                            .attr(\"class\",\"legend_row_color\")\r\n                            .attr(\"transform\", function(d:any,i:any){\r\n                                return \"translate(10,\"+(10+i*20)+\")\";\r\n                            });\r\n            g_row_legend_color.append(\"circle\")\r\n                            .attr(\"r\", 5)\r\n                            .attr(\"fill\", function(d:any){\r\n                                return d.color;\r\n                            })\r\n                            \r\n            g_row_legend_color.append(\"text\")\r\n                            .attr(\"x\", 10)\r\n                            .attr(\"y\", 5)\r\n                            .text(function(d:any){\r\n                                return d.text;\r\n                            })\r\n                            \r\n            row_legend_color.exit().remove();\r\n\r\n        // ---------------- Edge Color Legend -------------------------//\r\n        // let legend_edge_color_x = 10;\r\n        // let legend_edge_color_width = 38;\r\n        // let legend_edge_color_height = 100;\r\n        // let legend_edge_color_y = legend_pie_y - legend_color_height - legend_edge_color_height - 20;\r\n        // var legend_edge_color_svg = top_svg.select(\"#ForceDirectedEdgeColorLegend\")\r\n        //    .attr(\"width\", legend_edge_color_width)\r\n        //    .attr(\"height\", legend_edge_color_height)\r\n        //    .attr(\"transform\", \"translate(\"+legend_edge_color_x+\",\"+legend_edge_color_y+\")\");\r\n        // let legend_edge_rect = legend_edge_color_svg.selectAll(\"rect\").data([0]);\r\n        // let legend_edge_rect_enter = legend_edge_rect.enter().append(\"rect\");\r\n        // console.log(\"legend_rect\", legend_rect);\r\n        // legend_edge_rect_enter.merge(legend_edge_rect)\r\n        //    .attr(\"x\", 0)\r\n        //    .attr(\"y\", 0)\r\n        //    .attr(\"width\", legend_edge_color_width)\r\n        //    .attr(\"height\", legend_edge_color_height)\r\n        //    .attr(\"fill\", \"#fff\")\r\n        //    .attr(\"opacity\", 1)\r\n        //    .attr(\"stroke\", \"#bbb\")\r\n        //    .attr(\"stroke-width\", 1)\r\n        //    .attr(\"rx\",3)\r\n        //    .attr(\"ry\",3);\r\n        // Create the svg:defs element and the main gradient definition.\r\n        // var svgDefs = legend_edge_color_svg.selectAll(\"defs\").data([0]);\r\n\r\n        // var svgDefs_enter = svgDefs.enter().append('defs');\r\n\r\n        // var mainGradient = svgDefs_enter.append('linearGradient')\r\n        //    .attr('id', 'mainGradient')\r\n        //    .attr(\"gradientTransform\",\"rotate(90)\");\r\n\r\n        // Create the stops of the main gradient. Each stop will be assigned\r\n        // a class to style the stop using CSS.\r\n        // mainGradient.append('stop')\r\n        //    .attr('stop-color', \"rgba(187, 187, 187 ,1)\")\r\n        //    .attr('offset', '0');\r\n\r\n        // mainGradient.append('stop')\r\n        //    .attr('stop-color', 'rgba(187, 187, 187 ,0.1)')\r\n        //    .attr('offset', '1');\r\n        // let g_legend_edge_color = legend_edge_color_svg.selectAll(\"g.legend_edge_color\").data([0]);\r\n        // let g_legend_edge_color_enter = g_legend_edge_color.enter().append(\"g\").attr(\"class\",\"legend_edge_color\");\r\n        // let rect_legend_edge_color_enter = g_legend_edge_color_enter.append(\"rect\");\r\n        // let rect_legend_edge_color = g_legend_edge_color.select(\"rect\");\r\n        //let colorGradient = d3.scaleSequential(d3.interpolateRdYlGn);\r\n        // let top_padding = 20;\r\n        // let padding = 5;\r\n        // let text_width = 10;\r\n        // let rect_width = legend_edge_color_width-2*padding-text_width;\r\n        // let rect_height = legend_edge_color_height-2*padding - top_padding;\r\n        // rect_legend_edge_color_enter.merge(rect_legend_edge_color)\r\n        //    .attr(\"x\", padding)\r\n        //    .attr(\"y\", top_padding + padding)\r\n        //    .attr(\"width\", rect_width)\r\n        //    .attr(\"height\", rect_height)\r\n        //    .attr(\"fill\",\"url(#mainGradient)\");\r\n        // let legend_text_list = [\r\n        //    {\r\n        //        \"text\":\"1\",\r\n        //        \"x\":padding + rect_width,\r\n        //        \"y\":top_padding + padding,\r\n        //        \"dx\":\".02em\",\r\n        //        \"dy\":\".65em\",\r\n        //        \"text-anchor\":\"start\"\r\n        //    },\r\n        //    {\r\n        //        \"text\":\"0\",\r\n        //        \"x\":padding + rect_width,\r\n        //        \"y\":top_padding + padding + rect_height,\r\n        //        \"dx\":\".02em\",\r\n        //        \"dy\":\".05em\",\r\n        //        \"text-anchor\":\"start\"\r\n        //    },\r\n        //    {\r\n        //        \"text\":\"Edge\",\r\n        //        \"x\":padding,\r\n        //        \"y\":padding,\r\n        //        \"dx\":\".00em\",\r\n        //        \"dy\":\".65em\",\r\n        //        \"text-anchor\":\"start\"\r\n        //  }];\r\n        // let legend_text_update = g_legend_edge_color_enter.selectAll(\"text\").data(legend_text_list, function(d:any){\r\n        //    return d.text;\r\n        // });\r\n        // let legend_text_enter = legend_text_update.enter().append(\"text\");\r\n        \r\n        // legend_text_update.merge(legend_text_enter)\r\n        //    .attr(\"x\", (d:any)=>d.x)\r\n        //    .attr(\"y\", (d:any)=>d.y)\r\n        //    .attr(\"dx\", (d:any)=>d.dx)\r\n        //    .attr(\"dy\", (d:any)=>d.dy)\r\n        //    .attr(\"text-anchor\",(d:any)=>d[\"text-anchor\"])\r\n        //    .text((d:any)=>{\r\n        //        return d.text;\r\n        //    });\r\n        // let legend_title = g_legend_edge_color.exit().remove(); \r\n     }\r\n     // Render Canvas Main Function\r\n     public renderCanvas(){\r\n\r\n        // initialize \r\n        this.props.UpdateCurrentGraphJson(this.props.graph_json);\r\n        var onNodeClick = this.props.onNodeClick;\r\n        var nodenum = this.props.graph_json.nodenum;\r\n        var enabledForceDirected = this.props.graph_json.enable_forceDirected;\r\n        var neighborSet = this.props.graph_json.NeighborSet;\r\n        var colorLegend = this.props.graph_json.colorLegend;\r\n        var pieLegend = this.props.graph_json.pieLegend;\r\n        var configuration = {\r\n            \"strength\": 0.01,\r\n            \"radius\":15,\r\n            \"showlabel\": true,\r\n            \"showarrow\": true,\r\n            \"width\": this.props.width,\r\n            \"height\": this.props.height\r\n        }\r\n        var GraphViewState = this.props.GraphViewState;\r\n        var DisplayUnfocusedNodes = GraphViewState.DisplayUnfocusedNodes;\r\n        var DisplayOverview = GraphViewState.DisplayOverview;\r\n        //console.log(\"ForceDirected\" , nodenum)\r\n        if(nodenum >= 100){\r\n            configuration = {\r\n                \"strength\": 0.4,\r\n                \"radius\":3,\r\n                \"showlabel\": false,\r\n                \"showarrow\": false,\r\n                \"width\": this.props.width,\r\n                \"height\": this.props.height\r\n            }\r\n        }\r\n\r\n        var width = configuration[\"width\"];\r\n        var height = configuration[\"height\"];\r\n        var radius = configuration[\"radius\"];\r\n        var radius_gap = 0.3;\r\n        var graphWidth =  this.props.width;\r\n        var legend_configuration:any = {\r\n            \"width\":width,\r\n            \"height\":height,\r\n            \"colorLegend\":colorLegend,\r\n        }\r\n        // Render Legend\r\n        this.renderLegend(legend_configuration);\r\n\r\n        // Layered Canvas\r\n        //     Detect Event -- Capture Event\r\n        //     Overview Canvas  -- Display Overview\r\n        //     Hovered Canvas -- Hovered Canvas (will not modify the bottom canvas when hovering)\r\n        //     Bottom Canvas -- Bottom Canvas\r\n\r\n\r\n        // 1. Original Canvas\r\n        var graphCanvas = d3.select('#force_directed_graph').select('#bottom')\r\n        .attr('width', graphWidth + 'px')\r\n        .attr('height', height + 'px')\r\n        .node();\r\n        \r\n        var context = graphCanvas.getContext('2d');\r\n\r\n        // 2. Hovered Canvas\r\n        var middleCanvas = d3.select('#force_directed_graph').select(\"#middle\")\r\n        .attr('width', graphWidth + 'px')\r\n        .attr('height', height + 'px')\r\n        .node();\r\n        var middle_context = middleCanvas.getContext('2d');\r\n\r\n        // 3. Overview Canvas\r\n        var overviewCanvas = d3.select('#force_directed_graph').select('#overview')\r\n        .attr('width', graphWidth + 'px')\r\n        .attr('height', height + 'px')\r\n        .node();\r\n        var overview_context = overviewCanvas.getContext('2d');\r\n\r\n        // 4. Detect Event \r\n        var eventCanvas = d3.select('#force_directed_graph').select(\"#event\")\r\n        .attr('width', graphWidth + 'px')\r\n        .attr('height', height + 'px')\r\n        .node();\r\n         /**\r\n         * OverviewCanvas\r\n         */\r\n        let canvasWidth = 100;\r\n        let canvasHeight = 100;\r\n        let margin = 10;\r\n        let canvasX = graphWidth - canvasWidth - margin;\r\n        let canvasY = height - canvasHeight - margin;\r\n        let canvasXRight = canvasX + canvasWidth;\r\n        let canvasYBottom = canvasY + canvasHeight;\r\n        let radius_collision = radius*3 + radius_gap*3;\r\n\r\n        // Force Directed Layout Algorithm.\r\n        if(this.global_simulation){\r\n            this.global_simulation.stop();\r\n            delete this.global_simulation;\r\n        }\r\n        var simulation = d3.forceSimulation()\r\n                      .force(\"center\", d3.forceCenter(graphWidth / 2, height / 2))\r\n                      .force(\"x\", d3.forceX(graphWidth / 2).strength(0.1))\r\n                      .force(\"y\", d3.forceY(height / 2).strength(0.1))\r\n                      .force(\"charge\", d3.forceManyBody().strength(-50))\r\n                      .force(\"link\", d3.forceLink().strength(1).id(function(d:any) { return d.id; }))\r\n                      .force('collide', d3.forceCollide().radius((d:any) => radius_collision))\r\n                      .alphaTarget(0)\r\n                      .alphaDecay(0.05)\r\n                      \r\n        this.global_simulation = simulation;\r\n\r\n        let updateTransform = this.updateTransform;\r\n\r\n        // Transform\r\n        //    This transform is preserved. \r\n        var transform:any;\r\n        var calTransform:any={\r\n            \"x\":0,\r\n            \"y\":0,\r\n            \"k\":1\r\n        };\r\n        if(this.saved_transform){\r\n            transform =this.saved_transform ;\r\n        }else{\r\n            transform = d3.zoomIdentity;\r\n        }\r\n\r\n        \r\n        // Judge the hovered flag.\r\n        function judgeHoveredFlag(d:any, bool:boolean){\r\n            if(!d.hasOwnProperty(\"hovered\") || d[\"hovered\"]===false ){\r\n                if(bool === false){\r\n                    return false;\r\n                }else{\r\n                    return true;\r\n                }\r\n            }else{\r\n                if(bool === true){\r\n                    return false;\r\n                }else{\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Hide the tooltip. \r\n        function hiddenTooltip(){\r\n            d3.select(\"#force_directed_graph\").select(\"#tooltip\").style('opacity', 0);\r\n\r\n        }\r\n\r\n        // Processed Data. \r\n        let tempData = this.props.graph_json;\r\n        //console.log(\"tempData\", tempData);\r\n\r\n        let event_canvas = eventCanvas;\r\n        var mouseCoordinates:any = null;\r\n        d3.select(event_canvas).on(\"click\",handleMouseClick).on(\"mousemove\", handleMouseMove).on(\"mouseout\",handleMouseOut);\r\n        d3.select(event_canvas).call(d3.zoom().scaleExtent([1 / 10, 8]).on(\"zoom\", zoomed))\r\n        \r\n        // Control whether using force directed layout. \r\n        // SimulationUpdate is used to render the layout. \r\n        if(enabledForceDirected){\r\n            simulation\r\n                .nodes(tempData.nodes)\r\n                .on(\"tick\", simulationUpdate);\r\n\r\n            simulation.force(\"link\")\r\n                .links(tempData.links);\r\n\r\n        }else{\r\n            simulation.stop();\r\n            simulation\r\n                .nodes(tempData.nodes);\r\n\r\n            simulation.force(\"link\")\r\n                .links(tempData.links);\r\n            simulationUpdate();\r\n        }\r\n        \r\n        \r\n\r\n        // Determine the clicked ordering.\r\n        function order_determine(a:any,b:any){\r\n            let hover_cons_a = a.hasOwnProperty(\"hover_cons\")?a.hover_cons:1;\r\n            let hover_cons_b = b.hasOwnProperty(\"hover_cons\")?b.hover_cons:1;\r\n            let node_outer_radius_a = a.radius*hover_cons_a*2;\r\n            let node_outer_radius_b = b.radius*hover_cons_b*2;\r\n            return node_outer_radius_a<node_outer_radius_b?-1:1;\r\n        }\r\n        // Determine the clicked object.\r\n        function determineSubject(mouse_x:number,mouse_y:number){\r\n            var i,\r\n            x = transform.invertX(mouse_x),\r\n            y = transform.invertY(mouse_y),\r\n            dx,\r\n            dy;\r\n            let newNodeList = tempData.nodes.slice().sort(order_determine)\r\n            for (i = newNodeList.length - 1; i >= 0; --i) {\r\n                var node = newNodeList[i];\r\n                if(!DisplayUnfocusedNodes && !node[\"highlight\"]){\r\n                    continue;\r\n                }\r\n                dx = x - node.x;\r\n                dy = y - node.y;\r\n                let hover_cons = node.hasOwnProperty(\"hover_cons\")?node.hover_cons:1;\r\n                let outer_radius_node = node.radius * 2 * hover_cons;\r\n                if (dx * dx + dy * dy < outer_radius_node * outer_radius_node) {\r\n                    return node;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n       \r\n\r\n\r\n        // Zoom updating. \r\n        function zoomed(this:any) {\r\n            var xy = d3.mouse(this);\r\n            mouseCoordinates = xy;\r\n            transform = d3.event.transform;\r\n            if(determineEventSubject(xy[0], xy[1])===\"GraphCanvas\"){\r\n                updateTransform(transform);\r\n                simulationUpdate();\r\n            }\r\n        }\r\n        \r\n        // Mouse Move Handler. \r\n        // Use middleCanvasSimulationUpdate() to update the hovered nodes. \r\n        function handleMouseMove(this:any, obj:any=null, defaultUpdateFlag:boolean=false){\r\n            var xy:any;\r\n            if(obj){\r\n                xy = mouseCoordinates;\r\n            }else{\r\n                xy = d3.mouse(this);\r\n                mouseCoordinates = xy;\r\n            }\r\n            \r\n            var updateFlag = defaultUpdateFlag;\r\n\r\n            if(xy){\r\n                let event_subject = determineEventSubject(xy[0], xy[1]);\r\n                var selected = determineSubject(xy[0],xy[1]);\r\n                if(event_subject===\"GraphCanvas\"&&selected){\r\n                    updateFlag = true;\r\n                    let target_id = selected.id;\r\n\r\n                    d3.select(\"#force_directed_graph\").select('#tooltip')\r\n                        .style('opacity', 0.8)\r\n                        .style('top', (xy[1] + 5) + 'px')\r\n                        .style('left', (xy[0] + 5) + 'px')\r\n                        .html(target_id);\r\n\r\n                    let neighbor_id = neighborSet[selected.id];\r\n                    tempData.nodes.forEach((d:any)=>{\r\n                        if(target_id === d.id){\r\n                            d.hovered = true;\r\n                            d.hover_cons = 3;\r\n                        }else  if(neighbor_id.indexOf(d.id)>=0){\r\n                            d.hovered = true;\r\n                            d.hover_cons = 2;\r\n                        }else{   \r\n                            d.hovered = false;\r\n                            d.hover_cons = 1;\r\n                        }\r\n                    })\r\n                    \r\n                }else{\r\n                    tempData.nodes.forEach((d:any)=>{\r\n                        updateFlag = updateFlag || judgeHoveredFlag(d, false);\r\n                        d.hovered = false;\r\n                        d.hover_cons = 1;\r\n                    })\r\n                    hiddenTooltip();\r\n                }\r\n            }else{\r\n                tempData.nodes.forEach((d:any)=>{\r\n                    updateFlag = updateFlag || judgeHoveredFlag(d, false);\r\n                    d.hovered = false;\r\n                    d.hover_cons = 1;\r\n                })\r\n                hiddenTooltip();\r\n            }\r\n            \r\n            if(updateFlag){\r\n                middleCanvasSimulationUpdate()\r\n            }\r\n            \r\n        }\r\n\r\n        // Mouse Out handler. \r\n        function handleMouseOut(this:any, obj:any=null, defaultUpdateFlag:boolean=false){\r\n            var updateFlag = defaultUpdateFlag;\r\n            mouseCoordinates = null;\r\n            tempData.nodes.forEach((d:any)=>{\r\n                updateFlag = updateFlag || judgeHoveredFlag(d, false);\r\n                d.hovered = false;\r\n                d.hover_cons = 1;\r\n            })\r\n            hiddenTooltip();\r\n            if(updateFlag){\r\n                middleCanvasSimulationUpdate()\r\n            }\r\n        }\r\n\r\n        // Determine the clicked canvas. \r\n        function determineEventSubject(mouse_x:number, mouse_y:number){\r\n            if(mouse_x >= canvasX && mouse_x <=canvasXRight \r\n                && mouse_y >= canvasY && mouse_y <=canvasYBottom && DisplayOverview){\r\n                    return \"OverviewCanvas\";\r\n                }else{\r\n                    return \"GraphCanvas\";\r\n                }\r\n        }\r\n        // Mouse Click Handler.\r\n        function handleMouseClick(this:any, obj:any=null, defaultUpdateFlag:boolean=false){\r\n            if (d3.event.defaultPrevented) return; // zoomed\r\n\r\n            var xy:any;\r\n            if(obj){\r\n                xy = mouseCoordinates;\r\n            }else{\r\n                xy = d3.mouse(this);\r\n                mouseCoordinates = xy;\r\n            }\r\n\r\n            if(xy){\r\n                if(determineEventSubject(xy[0],xy[1])===\"OverviewCanvas\"){\r\n                    moveFocalPoint(xy[0], xy[1]);\r\n                }else{\r\n                    var selected = determineSubject(xy[0],xy[1]);\r\n                    if(selected){\r\n                        onNodeClick(selected.id);\r\n                    }\r\n                }\r\n\r\n            }else{\r\n\r\n            }\r\n            \r\n        }\r\n\r\n        // ---- The following code is reserved for overview canvas calculation. NOT IMPORTANT ---- //\r\n        // Calculate the bounding box of graph.\r\n        function calculateGraphBoundingBox(){\r\n            //let canvasWidth = graphWidth;\r\n            //let canvasHeight = height;\r\n            let minx=0, miny=0, maxx=0, maxy=0;\r\n            let flag = false;\r\n            tempData.nodes.forEach(function(d:any){\r\n                if(DisplayUnfocusedNodes || (!DisplayUnfocusedNodes && d.highlight)){\r\n                    let x = d.x;\r\n                    let y = d.y;\r\n                    if(!flag){\r\n                        minx = x;\r\n                        miny = y;\r\n                        maxx = x;\r\n                        maxy = y;\r\n                        flag = true;\r\n                    }else{\r\n                        if(minx > x){\r\n                            minx = x;\r\n                        }\r\n                        if(maxx < x){\r\n                            maxx = x;\r\n                        }\r\n                        if(miny > y){\r\n                            miny = y;\r\n                        }\r\n                        if(maxy < y){\r\n                            maxy = y;\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            })\r\n            let glyph_outer_radius = 3*2;\r\n            let margin = 14;\r\n            let leftbound = minx - glyph_outer_radius - margin;\r\n            let upperbound = miny - glyph_outer_radius - margin;\r\n            \r\n            let occupyWidth = maxx - minx + glyph_outer_radius*2 + margin*2;\r\n            let occupyHeight = maxy - miny + glyph_outer_radius*2 + margin*2;\r\n            return {\r\n                \"leftbound\":leftbound,\r\n                \"upperbound\":upperbound,\r\n                \"occupyWidth\":occupyWidth,\r\n                \"occupyHeight\":occupyHeight\r\n            }\r\n        }\r\n\r\n        // Calculate the transformed rects.\r\n        function rectTransform(rect_configuration:any, transform:any){\r\n            let rect_x = rect_configuration[\"x\"];\r\n            let rect_y = rect_configuration[\"y\"];\r\n            let rect_width = rect_configuration[\"width\"];\r\n            let rect_height = rect_configuration[\"height\"];\r\n            let dx = transform.x;\r\n            let dy = transform.y;\r\n            let scale = transform.k;\r\n            let x = (rect_x*scale + dx) ;\r\n            let y = (rect_y*scale + dy) ;\r\n            let width = (rect_width) * scale;\r\n            let height = (rect_height) * scale;\r\n            return {\r\n                \"x\":x,\r\n                \"y\":y,\r\n                \"width\":width,\r\n                \"height\":height\r\n            }\r\n        }\r\n\r\n        // Calculate the inversed transformed rects.\r\n        function rectInverseTransform(rect_configuration:any, transform:any){\r\n            let rect_x = rect_configuration[\"x\"];\r\n            let rect_y = rect_configuration[\"y\"];\r\n            let rect_width = rect_configuration[\"width\"];\r\n            let rect_height = rect_configuration[\"height\"];\r\n            let dx = -transform.x;\r\n            let dy = -transform.y;\r\n            let scale = 1/transform.k;\r\n            let x = (rect_x + dx) * scale;\r\n            let y = (rect_y + dy) * scale;\r\n            let width = (rect_width) * scale;\r\n            let height = (rect_height) * scale;\r\n            return {\r\n                \"x\":x,\r\n                \"y\":y,\r\n                \"width\":width,\r\n                \"height\":height\r\n            }\r\n        }\r\n\r\n        // Calculate the inversed transformed of points.\r\n        function pointInverseTransform(point_configuration:any, transform:any){\r\n            let point_x = point_configuration[\"x\"];\r\n            let point_y = point_configuration[\"y\"];\r\n            let dx = -transform.x;\r\n            let dy = -transform.y;\r\n            let scale = 1/transform.k;\r\n            let x = (point_x + dx) * scale;\r\n            let y = (point_y + dy) * scale;\r\n            return {\r\n                \"x\":x,\r\n                \"y\":y\r\n            }\r\n        }\r\n\r\n        // Move the Overview Focused View.\r\n        function moveFocalPoint(mouse_x:number, mouse_y:number){\r\n            let ori_point = {\r\n                \"x\":graphWidth / 2,\r\n                \"y\":height / 2\r\n            }\r\n            let ori_inverse_point = pointInverseTransform(ori_point, transform);\r\n            \r\n            let overview_point = {\r\n                \"x\": mouse_x,\r\n                \"y\": mouse_y\r\n            }\r\n            let overview_inverse_point = pointInverseTransform(overview_point, calTransform);\r\n            let new_x = -(overview_inverse_point[\"x\"] - ori_inverse_point[\"x\"])*transform.k + transform.x;\r\n            let new_y = -(overview_inverse_point[\"y\"] - ori_inverse_point[\"y\"])*transform.k + transform.y;\r\n            console.log({\r\n                ori_point, ori_inverse_point, overview_point, overview_inverse_point, new_x, new_y\r\n            })\r\n            transform.x = new_x;\r\n            transform.y = new_y;\r\n            updateTransform(transform);\r\n            simulationUpdate();\r\n            \r\n        }\r\n        // Calculate the rect in the overview. \r\n        function rectInverseTransformAndClip(rect_configuration:any,transform:any, bounding_box:any){\r\n            let leftbound = bounding_box[\"leftbound\"];\r\n            let upperbound = bounding_box[\"upperbound\"];\r\n            let occupyHeight = bounding_box[\"occupyHeight\"];\r\n            let occupyWidth = bounding_box[\"occupyWidth\"];\r\n            let rightbound = leftbound + occupyWidth;\r\n            let lowerbound = upperbound + occupyHeight;\r\n            let inverse_transform_rect = rectInverseTransform(rect_configuration, transform);\r\n            let transformed_leftbound = inverse_transform_rect[\"x\"];\r\n            let transformed_upperbound = inverse_transform_rect[\"y\"];\r\n            let transformed_rightbound = inverse_transform_rect[\"x\"]+inverse_transform_rect[\"width\"];\r\n            let transformed_lowerbound = inverse_transform_rect[\"y\"]+inverse_transform_rect[\"height\"];\r\n\r\n            if(transformed_leftbound<leftbound){\r\n                transformed_leftbound = leftbound;\r\n            }\r\n            if(transformed_rightbound>rightbound){\r\n                transformed_rightbound = rightbound;\r\n            }\r\n            if(transformed_upperbound<upperbound){\r\n                transformed_upperbound = upperbound;\r\n            }\r\n            if(transformed_lowerbound>lowerbound){\r\n                transformed_lowerbound = lowerbound;\r\n            }\r\n            let clipx = transformed_leftbound;\r\n            let clipy = transformed_upperbound;\r\n            let clipwidth = transformed_rightbound - transformed_leftbound;\r\n            let clipheight = transformed_lowerbound - transformed_upperbound;\r\n            if(clipwidth < 0){\r\n                clipwidth = 0;\r\n            }else if(clipwidth>occupyWidth){\r\n                clipwidth = occupyWidth;\r\n            }\r\n            if(clipheight<0){\r\n                clipheight=0;\r\n            }else if(clipheight>occupyHeight){\r\n                clipheight = occupyHeight;\r\n            }\r\n            return {\r\n                \"x\":clipx,\r\n                \"y\":clipy,\r\n                \"width\":clipwidth,\r\n                \"height\":clipheight\r\n            }\r\n\r\n        }\r\n        function calculateTransform(canvasX:number,canvasY:number,canvasWidth:number, canvasHeight:number, bounding_box:any){\r\n            let leftbound = bounding_box[\"leftbound\"];\r\n            let upperbound = bounding_box[\"upperbound\"];\r\n            let occupyHeight = bounding_box[\"occupyHeight\"];\r\n            let occupyWidth = bounding_box[\"occupyWidth\"];\r\n            let xscale = canvasWidth / occupyWidth;\r\n            let yscale = canvasHeight / occupyHeight;\r\n            let scale = Math.min(xscale, yscale);\r\n            let dx = (canvasWidth - occupyWidth * scale)/2 - leftbound*scale + canvasX;\r\n            let dy = (canvasHeight - occupyHeight * scale)/2 - upperbound*scale + canvasY;\r\n            //console.log(\"canvasWidth, canvasHeight, occupyWidth, occupyHeight\", canvasWidth,canvasHeight, occupyWidth,occupyHeight);\r\n            let calTransform = {\r\n                \"k\": scale,\r\n                \"x\":dx,\r\n                \"y\":dy\r\n\r\n            }\r\n            return calTransform;\r\n\r\n        }\r\n\r\n\r\n        // ---- The above code is reserved for overview canvas calculation. NOT IMPORTANT ---- //\r\n\r\n        // 2. Main render function.\r\n        function renderContext(context:any){\r\n\r\n\r\n            // Unfocused nodes rendering.\r\n            if(DisplayUnfocusedNodes){\r\n                tempData.links.filter((d:any)=>{\r\n                    if(d.source.highlight && d.target.highlight){\r\n                        return false;\r\n                    }else{\r\n                        return true;\r\n                    }\r\n                }).forEach(function(d:any) {\r\n                    // Draw Line\r\n                    drawLine(context, d.color, d.source.x, d.source.y, d.target.x, d.target.y, null, d.weight);\r\n                });\r\n        \r\n                // Draw the nodes\r\n                tempData.nodes.filter((d:any)=>{\r\n                    return !d[\"highlight\"];\r\n                }\r\n                ).forEach(function(d:any, i:any) {\r\n                    // Draw Node Glyph\r\n                    //console.log(\"radius\",d.radius);\r\n                    let node_inner_radius = d.radius - radius_gap;\r\n                    let node_radius = d.radius;\r\n                    let node_outer_radius = d.radius * 2;\r\n                    let node_outer_arc_encoded_value = d.node_weight;\r\n                    let node_outer_arc_radius = node_outer_radius + radius_gap * 5;\r\n                    drawNodeGlyph(context, d.color, node_inner_radius, \r\n                        node_radius, node_outer_radius, d.x, d.y, false,\r\n                        node_outer_arc_encoded_value, node_outer_arc_radius);\r\n                });\r\n            }\r\n            \r\n            // Focused nodes rendering\r\n            tempData.links.filter((d:any)=>{\r\n                if(d.source.highlight && d.target.highlight){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }).forEach(function(d:any) {\r\n                drawLine(context, d.color, d.source.x, d.source.y, d.target.x, d.target.y, 5 * d.weight, d.weight);\r\n            });\r\n            tempData.nodes.filter((d:any)=>{\r\n                return d[\"highlight\"];\r\n                \r\n            }).forEach(function(d:any,i:any){\r\n                let node_inner_radius = d.radius - radius_gap;\r\n                let node_radius = d.radius;\r\n                let node_outer_radius = d.radius * 2;\r\n                let node_outer_arc_encoded_value = d.node_weight;\r\n                let node_outer_arc_radius = node_outer_radius + radius_gap * 5;\r\n                drawNodeGlyph(context, d.color, node_inner_radius, \r\n                    node_radius, node_outer_radius, d.x, d.y, false,\r\n                    node_outer_arc_encoded_value, node_outer_arc_radius);\r\n\r\n            })\r\n        }\r\n\r\n        // Main Function for Updating Layout.\r\n        function simulationUpdate(){\r\n            context.save();\r\n            context.clearRect(0, 0, graphWidth, height);\r\n            context.translate(transform.x, transform.y);\r\n            context.scale(transform.k, transform.k);\r\n            renderContext(context);\r\n            context.restore();\r\n            \r\n            //let canvasWidth = 100 * graphWidth / height;\r\n            // ---- The following code is reserved for overview canvas calculation. NOT IMPORTANT ---- //\r\n\r\n            if(DisplayOverview){\r\n                let graph_bounding_box = calculateGraphBoundingBox();\r\n                calTransform = calculateTransform(canvasX, canvasY, canvasWidth, canvasHeight, graph_bounding_box);\r\n                let rect_configuration = {\r\n                    \"x\":0, \"y\":0, \"width\":graphWidth, \"height\":height\r\n                }\r\n                let overview_configuration = {\r\n                    \"x\":canvasX,\r\n                    \"y\":canvasY,\r\n                    \"width\":canvasWidth,\r\n                    \"height\":canvasHeight\r\n                }\r\n                let overview_inverse_rect = rectInverseTransform(overview_configuration, calTransform);\r\n                let overview_bounding_box = {\r\n                    \"leftbound\":overview_inverse_rect[\"x\"],\r\n                    \"upperbound\":overview_inverse_rect[\"y\"],\r\n                    \"occupyWidth\":overview_inverse_rect[\"width\"],\r\n                    \"occupyHeight\":overview_inverse_rect[\"height\"]\r\n                }\r\n                let view_inverse_configuration = rectInverseTransformAndClip(rect_configuration, transform, overview_bounding_box);\r\n                let view_configuration = rectTransform(view_inverse_configuration, calTransform); \r\n    \r\n                overview_context.save();\r\n                overview_context.clearRect(0, 0, graphWidth, height);\r\n                drawRectStroke(overview_context, canvasX, canvasY, canvasWidth, canvasHeight);\r\n                drawRect(overview_context, canvasX, canvasY, canvasWidth, canvasHeight);\r\n                \r\n                overview_context.translate(calTransform.x, calTransform.y);\r\n                overview_context.scale(calTransform.k, calTransform.k);\r\n                renderContext(overview_context);\r\n                overview_context.scale(1/calTransform.k, 1/calTransform.k);\r\n                overview_context.translate(-calTransform.x, -calTransform.y);\r\n                drawRectStroke(overview_context, view_configuration[\"x\"], view_configuration[\"y\"], view_configuration[\"width\"], view_configuration[\"height\"],\"#000\");\r\n                drawRect(overview_context, view_configuration[\"x\"], view_configuration[\"y\"], view_configuration[\"width\"], view_configuration[\"height\"],\"#ccc\",0.5);\r\n                overview_context.restore();\r\n                \r\n            }\r\n            // ---- The above code is reserved for overview canvas calculation. NOT IMPORTANT ---- //\r\n\r\n            \r\n            handleMouseMove(middleCanvas, true);\r\n        }\r\n\r\n\r\n        // When hovering, changing middle canvas.\r\n        function middleCanvasSimulationUpdate(){\r\n            let judgeHovered = (d:any)=>{\r\n                if(d.hasOwnProperty(\"hovered\") && d[\"hovered\"]){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }\r\n            middle_context.save();\r\n            \r\n            middle_context.clearRect(0, 0, graphWidth, height);\r\n            middle_context.translate(transform.x, transform.y);\r\n            middle_context.scale(transform.k, transform.k);\r\n            tempData.links.filter((d:any)=>{\r\n                if(judgeHovered(d.source) && judgeHovered(d.target)){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }).forEach(function(d:any) {\r\n                drawLine(middle_context, d.real_color, d.source.x, d.source.y, d.target.x, d.target.y, null, d.weight);\r\n            });\r\n            // Draw the hovered nodes\r\n            tempData.nodes.filter((d:any)=>{\r\n                return judgeHovered(d);\r\n            }).sort(order_determine).forEach(function(d:any, i:any) {\r\n                let node_inner_radius = d.radius - radius_gap;\r\n                let node_radius = d.radius;\r\n                let node_outer_radius = d.radius * 2;\r\n                let node_outer_arc_encoded_value = d.node_weight;\r\n                let node_outer_arc_radius = node_outer_radius + radius_gap * 5;\r\n                drawNodeGlyph(middle_context, d.real_color, node_inner_radius*d.hover_cons, \r\n                    node_radius*d.hover_cons, node_outer_radius*d.hover_cons, d.x, d.y, true, \r\n                    node_outer_arc_encoded_value, node_outer_arc_radius*d.hover_cons, false);\r\n            });\r\n            middle_context.restore();\r\n        }\r\n     }\r\n \r\n    public render() {     \r\n        return (\r\n            <div id=\"force_directed_graph\">\r\n                <canvas id=\"bottom\" className=\"AbsPos\" />\r\n                <canvas id=\"middle\" className=\"AbsPos\"/>\r\n                <canvas id=\"overview\" className=\"AbsPos\"/>\r\n                <svg\r\n                    id=\"svgChart\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    className=\"AbsPos\"\r\n                >\r\n                    <g id=\"ForceDirectedLegend\">\r\n\r\n                    </g>\r\n                    <g id=\"ForceDirectedColorLegend\">\r\n\r\n                    </g>\r\n                </svg>\r\n                <div id=\"tooltip\" className=\"AbsPos\" />\r\n                \r\n                <canvas id=\"event\" className=\"AbsPos\"/>\r\n            </div>\r\n            \r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\n","import ForceDirectedGraphCanvas from '../components/DataRuns/GraphView/ForceDirectedGraphCanvas'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    GraphViewState: state.GraphViewState\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ForceDirectedGraphCanvas);\r\n\r\n\r\n\r\n","\r\nimport * as React from \"react\";\r\nimport { Select, Button,  Tag, InputNumber } from 'antd';\r\nimport {getNodeColor, constructNeighborSet, getNodeStatisticStr, \r\n    constructGraphIn, transform_graphlayout, skew_weight} from '../../../helper';\r\nimport { SettingOutlined } from '@ant-design/icons';\r\nimport GraphViewSettingsModalContainer from '../../../container/GraphViewSettingsModalContainer';\r\nimport ForceDirectedGraphCanvasContainer from '../../../container/ForceDirectedGraphCanvasContainer';\r\nconst Option = Select.Option;\r\n\r\n\r\nexport interface IProps {\r\n    // For original graph object\r\n    graph_object:any,\r\n    model_nlabels:any,\r\n    model_eweights:any,\r\n    model_nweights:any,\r\n    NLabelList:any,\r\n    eweightList:any,\r\n    // For subgraphs\r\n    subgs:any,\r\n    subgList:any,\r\n    // For size of view.\r\n    width: number,\r\n    height: number,\r\n    // For displayed nodes.\r\n    selectedNodeIdList:any[],\r\n    // For users selected node.\r\n    changeSelectInspectNode:any,\r\n    select_inspect_node : number,\r\n    changeShowSource:any,\r\n    showSource: boolean,\r\n    // For extended mode. \r\n    extendedMode: any,\r\n    changeExtendedMode:any,\r\n    // For Graph View Setting Modal.\r\n    GraphViewSettingsModal_visible:any,\r\n    changeGraphViewSettingsModal_visible:any,\r\n\r\n    enableForceDirected: boolean,\r\n    changeEnableForceDirected: any\r\n}\r\nexport interface IState {\r\n\r\n}\r\n\r\nexport default class GraphView extends React.Component<IProps, IState>{\r\n    public prevGraphJson:any = null;\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.onEnableForceDirected = this.onEnableForceDirected.bind(this);\r\n        this.onExtendedModeChange = this.onExtendedModeChange.bind(this);\r\n        this.onNodeClick = this.onNodeClick.bind(this);\r\n        this.onChangeSelectInspectNode = this.onChangeSelectInspectNode.bind(this);\r\n        this.UpdateCurrentGraphJson = this.UpdateCurrentGraphJson.bind(this);\r\n        this.state = {\r\n        }\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n    public UpdateCurrentGraphJson(current_graph_json:any){\r\n        //console.log(\"Store Graph Json.\")\r\n        this.prevGraphJson = current_graph_json;\r\n    }\r\n    // Handling the node click event.\r\n    public onNodeClick(node_id:number){\r\n        let {showSource} = this.props;\r\n        if(showSource === false){\r\n            // select node in graph view and update showSource mode.\r\n            this.props.changeSelectInspectNode(node_id);\r\n            this.props.changeShowSource(true);\r\n            this.props.changeExtendedMode(3);\r\n        }else{\r\n            this.props.changeSelectInspectNode(node_id);\r\n        } \r\n    }\r\n    // Color Legend Info.\r\n    public getColorLegend(color_mode:boolean, num_types:number){\r\n        let label = [];\r\n        if (color_mode) {\r\n            for(let i = 0; i< num_types; i++){\r\n                label.push({\r\n                    \"text\":i,\r\n                    \"color\":getNodeColor(i,2)\r\n                })\r\n            }\r\n        }\r\n        return label;\r\n    }\r\n    // Data Preprocessing for node subgraph\r\n    //    graph_object: original graph object.\r\n    //    model_nlabels: record mapping from model names to predicted nlabels\r\n    //    model_eweights: record mapping from eweight names to eweight values\r\n    //    model_nweights: record mapping from nweight names to nweight values\r\n    //    NLabelList: array of nlabel names, e.g. \"ground_truth\", \"GCN\"\r\n    //    eweightList: array of attention head names, e.g. \"layer-0-head-1\"\r\n    //    selecteedNodeIdList: displayed nodes.\r\n    //    enableForceDirected:  control whether using force directed layout.\r\n    //    select_inspect_node:  users selected node id. \r\n    //    showSource:   current mode on whether showing only selected node. \r\n    //    width / height: the size of graph view.\r\n    public constructNodeGraphJson(graph_object:any, model_nlabels:any, model_eweights:any, model_nweights:any, NLabelList:any, eweightList:any, selectedNodeIdList:any, \r\n        enableForceDirected:boolean, select_inspect_node:number, showSource:boolean, width:number, height:number){\r\n        let ew = eweightList;\r\n        let selectStr = selectedNodeIdList.join(\"_\");\r\n        let NLabelName = NLabelList.join(\"_\");\r\n        let common = graph_object;\r\n        \r\n        // 1. Data package fingerprint. \r\n        let graph_name; \r\n        graph_name = common.name+\"_\"+common.bundle_id\r\n                    +\"_SELECTED_\"+selectStr+\"_SELECTEDEND_\"\r\n                    +\"_NLABEL_\"+NLabelName+\"_NLABELEND_\"\r\n                    +\"_EWEIGHT_\"+ew+\"_EWEIGHTEND_\"\r\n                    +enableForceDirected+\"_\"+width+\"_\"+height+\"_\";\r\n        let graph_in = constructGraphIn(common);\r\n        let graph_target = common.nlabels;\r\n        // let graph_layout = common.layout;\r\n        let source_list = graph_in.senders;\r\n        let target_list = graph_in.receivers;\r\n        let node_num = graph_in.num_nodes;\r\n        let edge_num = graph_in.senders.length;\r\n        let eweight = model_eweights;\r\n        // let nweight = model_nweights;\r\n\r\n        // 2. Default to show all nodes.\r\n        if(selectedNodeIdList.length === 0){            \r\n            selectedNodeIdList = []\r\n            for(let i = 0; i<node_num;i++){\r\n                selectedNodeIdList.push(i);\r\n            }\r\n        }\r\n\r\n        // 3. Transform the graph layout.\r\n        // let new_graph_layout = [];\r\n        // for(let i = 0; i<node_num;i++){\r\n        //    let xy = graph_layout[\"\"+i];\r\n        //    new_graph_layout.push(xy)\r\n        // }\r\n        // let enable_forceDirected = enableForceDirected;\r\n        // if(new_graph_layout.length > 0){\r\n        //    new_graph_layout = transform_graphlayout(new_graph_layout, width, height);\r\n        // }\r\n\r\n        // 4. If we have processed the graph layout, then we use previous graph layout.\r\n        let enablePrevGraphLayout = false;\r\n        let prevGraphJson = this.prevGraphJson;\r\n        if(prevGraphJson && prevGraphJson[\"success\"]){\r\n            if(prevGraphJson[\"nodes\"].length === node_num){\r\n                enablePrevGraphLayout = true;\r\n            }\r\n        }\r\n        //console.log(\"enablePrevGraphLayout, enableForceDirected, prevGraphJson\", enablePrevGraphLayout, enableForceDirected, prevGraphJson);\r\n        // 5. Derive the info of nodes and links.\r\n        let nodes_json = [];   // node info\r\n        let links_json = [];   // link info\r\n        let links_color_json = [];   // link color info\r\n        \r\n        // Prepare properties of nodes.\r\n        let color_mode: boolean = NLabelList.length !== 0;\r\n        // If ground truth is not selected, then we use dummycolor to fill the area of ground truth. \r\n        let dummycolor = \"#aaa\";\r\n        let init_color:any = [];\r\n        if (!color_mode) {\r\n            init_color = [dummycolor];\r\n        }\r\n        for(let i = 0; i<node_num;i++){\r\n            let label = 0;\r\n            let index = i;\r\n            let real_color:any;\r\n            let highlight = 1;\r\n            let node_weight = 1;\r\n            let color = init_color.slice();\r\n            NLabelList.forEach((d:any)=>{\r\n                if(d === \"ground_truth\"){\r\n                    let nlabel = graph_target[index];\r\n                    color.push(getNodeColor(nlabel, 2));\r\n                }else{\r\n                    let nlabel = model_nlabels[d][index];\r\n                    color.push(getNodeColor(nlabel, 2));\r\n                }\r\n            })\r\n            real_color = color.slice();  // original color storage.\r\n            if(selectedNodeIdList.indexOf(index)<0){\r\n                // Unfocused nodes color will be set to \"#ddd\".\r\n                color = [\"#ddd\"];\r\n                highlight = 0;\r\n            }\r\n            \r\n            //if(nweight && NLabelList[0] && nweight[NLabelList[0]]) {\r\n            //    node_weight = nweight[NLabelList[0]][index];\r\n            //}\r\n            let radius = 3;\r\n            if(index === select_inspect_node && showSource === true){\r\n                radius = 6;\r\n            }\r\n            let node_object:any = {\r\n                \"id\":index,\r\n                \"group\":label, // dummy\r\n                \"color\":color,\r\n                \"real_color\":real_color,\r\n                \"radius\":radius,  // the radius of the node\r\n                \"highlight\":highlight,  // whether the node is highlighted.\r\n                \"node_weight\":skew_weight(node_weight)\r\n            }            \r\n            if(enablePrevGraphLayout){\r\n                node_object[\"x\"] = prevGraphJson[\"nodes\"][i][\"x\"];\r\n                node_object[\"y\"] = prevGraphJson[\"nodes\"][i][\"y\"];\r\n            }\r\n            //else if(enable_forceDirected === false){\r\n            //    node_object[\"x\"] = new_graph_layout[i][0];\r\n            //    node_object[\"y\"] = new_graph_layout[i][1];\r\n            //}\r\n            nodes_json.push(node_object);\r\n        }\r\n\r\n        // Prepare Properties of Links\r\n        let edge_weighted: boolean;\r\n        let current_eweights;\r\n        if(eweightList && eweightList.length!=0) {\r\n            edge_weighted = true;\r\n            let graph_eweight_options = Object.keys(common.eweights);\r\n            if (graph_eweight_options.indexOf(eweightList) > -1) {\r\n                current_eweights = common.eweights[eweightList];\r\n            } else {\r\n                current_eweights = eweight[eweightList];\r\n            }\r\n        } else {\r\n            edge_weighted = false;\r\n        }\r\n\r\n        for(let i = 0; i<edge_num;i++){\r\n            let link_color = \"#eee\";\r\n            // TODO: make default width configurable\r\n            let edge_weight = 0.1;\r\n            if(edge_weighted) {\r\n                edge_weight = current_eweights[i];\r\n            }\r\n            let real_color = \"#bbb\";\r\n            if(selectedNodeIdList.indexOf(source_list[i])>=0){\r\n                if(selectedNodeIdList.indexOf(target_list[i])>=0){\r\n                    link_color = \"#bbb\";\r\n                }\r\n            }\r\n            // Store the possible color. \r\n            if(links_color_json.indexOf(link_color)>=0){\r\n                \r\n            }else{\r\n                links_color_json.push(link_color);\r\n            }\r\n            \r\n            links_json.push({\r\n                \"source\": source_list[i],\r\n                \"target\": target_list[i],\r\n                \"value\":1,\r\n                \"weight\":skew_weight(edge_weight),\r\n                \"color\":link_color,\r\n                \"real_color\":real_color    // For hovered link color.\r\n            })\r\n        }\r\n\r\n        let graph_json = {\r\n            \"success\":true,\r\n            \"name\":graph_name,\r\n            \"nodes\":nodes_json,\r\n            \"links\":links_json,\r\n            \"links_color\":links_color_json,\r\n            \"nodenum\":node_num,\r\n            \"edgenum\":edge_num,\r\n            \"enable_forceDirected\":enableForceDirected,\r\n            \"colorLegend\":this.getColorLegend(color_mode, common.num_nlabel_types)\r\n        }\r\n        return graph_json;\r\n    }\r\n\r\n    // Data Preprocessing for edge subgraph\r\n    //    graph_object: original graph object.\r\n    //    model_nlabels: record mapping from model names to predicted nlabels\r\n    //    NLabelList: array of nlabel names, e.g. \"ground_truth\", \"GCN\"\r\n    //    select_inspect_node: selected node\r\n    //    subg_name: subgraph name\r\n    //    subgs: record mapping from subgraph name to subgraph collections\r\n    //    enableForceDirected:  control whether using force directed layout.\r\n    //    showSource:   current mode on whether showing only selected node.\r\n    //    width / height: the size of graph view.\r\n    public constructEdgeGraphJson(graph_object:any, model_nlabels:any, NLabelList:any, select_inspect_node:number, \r\n        subg_name:string, subgs:any, enableForceDirected:boolean, showSource:boolean, width:number, height:number){\r\n        let common = graph_object;\r\n\r\n        // 1. Data package fingerprint. \r\n        let graph_name = common.name+\"_\"+common.bundle_id\r\n                        +\"_SUBG_\"+subg_name+\"_SUBGEND_\"\r\n                        +\"_NODE_\"+select_inspect_node+\"_NODEEND_\"\r\n                        +enableForceDirected+\"_\"+width+\"_\"+height+\"_\";\r\n        let node_num = common.num_nodes;\r\n        let edge_num = common.srcs.length;\r\n        let graph_target = common.nlabels;\r\n        // let graph_layout = common.layout;\r\n        let source_list = common.srcs;\r\n        let target_list = common.dsts;\r\n        // ordered\r\n        let selectedNodeIdList = subgs[subg_name][select_inspect_node].nodes;\r\n        // ordered\r\n        let selectedEdgeIdList = subgs[subg_name][select_inspect_node].eids;\r\n        let eweight = subgs[subg_name][select_inspect_node].eweight;\r\n        \r\n        // 2. Transform the graph layout.\r\n        // TODO: revisit and see if this is really necessary.\r\n        // let new_graph_layout = [];\r\n        // for(let i = 0; i<node_num;i++){\r\n        //     let xy = graph_layout[\"\"+i];\r\n        //     new_graph_layout.push(xy)\r\n        // }\r\n        let enable_forceDirected = enableForceDirected;\r\n        // if(new_graph_layout.length > 0){\r\n        //     new_graph_layout = transform_graphlayout(new_graph_layout, width, height);\r\n        // }\r\n\r\n        // 3. If we have processed the graph layout, then we use previous graph layout.\r\n        let enablePrevGraphLayout = false;\r\n        let prevGraphJson = this.prevGraphJson;\r\n        if(prevGraphJson && prevGraphJson[\"success\"]){\r\n            if(prevGraphJson[\"nodes\"].length === node_num){\r\n                enablePrevGraphLayout = true;\r\n            }\r\n        }\r\n\r\n        // 4. Derive the info of nodes and links.\r\n        let nodes_json = [];   // node info\r\n        let links_json = [];   // link info\r\n        let links_color_json = [];   // link color info\r\n\r\n        // Prepare properties of nodes.\r\n        let color_mode: boolean = NLabelList.length !== 0;\r\n        // If ground truth is not selected, then we use dummycolor to fill the area of ground truth.\r\n        let dummycolor = \"#aaa\";\r\n        let init_color:any = [];\r\n        if (!color_mode) {\r\n            init_color = [dummycolor];\r\n        }\r\n        let selectedNodeOrder = 0;\r\n        for(let i = 0; i<node_num;i++){\r\n            let label = 0;\r\n            let index = i;\r\n            let real_color:any;\r\n            let highlight = 1;\r\n            let node_weight = 1;\r\n            let color = init_color.slice();\r\n            NLabelList.forEach((d:any)=>{\r\n                if(d === \"ground_truth\"){\r\n                    let nlabel = graph_target[index];\r\n                    color.push(getNodeColor(nlabel, 2));\r\n                }else{\r\n                    let nlabel = model_nlabels[d][index];\r\n                    color.push(getNodeColor(nlabel, 2));\r\n                }\r\n            })\r\n            real_color = color.slice();  // original color storage.\r\n\r\n            if(selectedNodeIdList[selectedNodeOrder] === i){\r\n                selectedNodeOrder = selectedNodeOrder + 1;\r\n            } else {\r\n                // Unfocused nodes color will be set to \"#ddd\".\r\n                color = [\"#ddd\"];\r\n                highlight = 0;\r\n            }\r\n\r\n            let radius = 3;\r\n            if(index === select_inspect_node && showSource === true){\r\n                radius = 6;\r\n            }\r\n            let node_object:any = {\r\n                \"id\":index,\r\n                \"group\":label, // dummy\r\n                \"color\":color,\r\n                \"real_color\":real_color,\r\n                \"radius\":radius,  // the radius of the node\r\n                \"highlight\":highlight,  // whether the node is highlighted.\r\n                \"node_weight\":skew_weight(node_weight)\r\n            }\r\n            if(enablePrevGraphLayout){\r\n                node_object[\"x\"] = prevGraphJson[\"nodes\"][i][\"x\"];\r\n                node_object[\"y\"] = prevGraphJson[\"nodes\"][i][\"y\"];\r\n            }\r\n            //else if(enable_forceDirected === false){\r\n            //    node_object[\"x\"] = new_graph_layout[i][0];\r\n            //    node_object[\"y\"] = new_graph_layout[i][1];\r\n            // }\r\n            nodes_json.push(node_object);\r\n        }\r\n\r\n        // Prepare Properties of Links\r\n        let selectedEdgeOrder = 0;\r\n        for(let i = 0; i<edge_num;i++){\r\n            let link_color = \"#eee\";\r\n            // TODO: make default width configurable\r\n            let edge_weight = 0.1;\r\n            let real_color = \"#bbb\";\r\n            if(i === selectedEdgeIdList[selectedEdgeOrder]) {\r\n                link_color = \"#bbb\";\r\n                edge_weight = eweight[selectedEdgeOrder];\r\n                selectedEdgeOrder = selectedEdgeOrder + 1;\r\n            }\r\n            // Store the possible color. \r\n            if(links_color_json.indexOf(link_color)>=0){\r\n                \r\n            }else{\r\n                links_color_json.push(link_color);\r\n            }\r\n\r\n            links_json.push({\r\n                \"source\": source_list[i],\r\n                \"target\": target_list[i],\r\n                \"value\":1,\r\n                \"weight\":skew_weight(edge_weight),\r\n                \"color\":link_color,\r\n                \"real_color\":real_color    // For hovered link color.\r\n            })\r\n        }\r\n\r\n        let graph_json = {\r\n            \"success\":true,\r\n            \"name\":graph_name,\r\n            \"nodes\":nodes_json,\r\n            \"links\":links_json,\r\n            \"links_color\":links_color_json,\r\n            \"nodenum\":node_num,\r\n            \"edgenum\":edge_num,\r\n            \"enable_forceDirected\":enable_forceDirected,\r\n            \"colorLegend\":this.getColorLegend(color_mode, common.num_nlabel_types)\r\n        }\r\n        return graph_json;\r\n    }\r\n\r\n    // Enable Force Directed Layout.\r\n    public onEnableForceDirected(checked:boolean){\r\n        console.log(\"Change State,\", checked);\r\n        /*this.setState({\r\n            enableForceDirected: checked\r\n        })*/\r\n        this.props.changeEnableForceDirected(checked);\r\n    }\r\n\r\n    // Extended Mode Change\r\n    public onExtendedModeChange(e:any){\r\n        this.props.changeExtendedMode(e);\r\n    }\r\n\r\n    // Construct Extended Selected Node Id List\r\n    public constructExtendedSelectedNodeIdList(selectedNodeIdList:any, NeighborSet:any){\r\n        if(selectedNodeIdList.length === 0){\r\n            return [];\r\n        }else{\r\n            \r\n            let new_selectedNodeIdList = selectedNodeIdList.slice();\r\n            for(let i = 0 ; i<selectedNodeIdList.length; i++){\r\n                let nodeId = selectedNodeIdList[i];\r\n                new_selectedNodeIdList = new_selectedNodeIdList.concat(NeighborSet[nodeId])\r\n            }\r\n\r\n            new_selectedNodeIdList = Array.from(new Set(new_selectedNodeIdList));\r\n            return new_selectedNodeIdList;\r\n        }\r\n        \r\n    }\r\n\r\n    // change select node.\r\n    public onChangeSelectInspectNode(node_id:any, node_num:number){\r\n        let new_node_id:number = parseInt(node_id);\r\n        if(!new_node_id || new_node_id<0){\r\n            new_node_id = 0;\r\n        }\r\n        if(new_node_id>=node_num){\r\n            new_node_id = node_num - 1;\r\n        }\r\n        console.log(\"graphview, new_node_id\", new_node_id);\r\n        this.props.changeSelectInspectNode(new_node_id);\r\n    }\r\n\r\n    // show graph view setting modal.\r\n    public showGraphViewSettingModal(){\r\n        this.props.changeGraphViewSettingsModal_visible(true);\r\n    }\r\n    public render() {\r\n        let {graph_object, model_nlabels, model_eweights, model_nweights, subgs, NLabelList, eweightList, subgList, \r\n            selectedNodeIdList, showSource, select_inspect_node, width, height, extendedMode} = this.props;\r\n\r\n        let onNodeClick = this.onNodeClick;\r\n        let UpdateCurrentGraphJson = this.UpdateCurrentGraphJson;\r\n        let specificNodeIdList = selectedNodeIdList;\r\n\r\n        let common = graph_object;\r\n        let graph_in = constructGraphIn(common);\r\n\r\n        // Construct Neighbor Set\r\n        let NeighborSet = constructNeighborSet(graph_in);\r\n        \r\n        // Define Force Directed Graph Size.\r\n        let ForceDirectedWidth = width - 10;\r\n        let ForceDirectedHeight = height - 50;\r\n        if(showSource){\r\n            if(width < 800 && width > 650){\r\n                ForceDirectedHeight = height - 50 - 23;\r\n            }else if(width <= 650){\r\n                ForceDirectedHeight = height - 50 - 47;\r\n            }\r\n        }else{\r\n            if(width < 650 && width > 550){\r\n                ForceDirectedHeight = height - 50 - 23;\r\n            }else if(width <= 550){\r\n                ForceDirectedHeight = height - 50 - 47;\r\n            }\r\n        }\r\n\r\n\r\n        // Preprocess Data.\r\n        let graph_json:any;\r\n        if(extendedMode <= 3) {\r\n            // According to the showSource to determine the displayed node. \r\n            if(showSource){\r\n                specificNodeIdList = [select_inspect_node];\r\n            }\r\n            // Extended Mode Configuration\r\n            if(extendedMode === 2){\r\n                specificNodeIdList = this.constructExtendedSelectedNodeIdList(specificNodeIdList, NeighborSet);\r\n            }else if(extendedMode === 3){\r\n                specificNodeIdList = this.constructExtendedSelectedNodeIdList(specificNodeIdList, NeighborSet);\r\n                specificNodeIdList = this.constructExtendedSelectedNodeIdList(specificNodeIdList, NeighborSet);\r\n            }\r\n\r\n            graph_json = this.constructNodeGraphJson(graph_object, model_nlabels, model_eweights, model_nweights, \r\n                NLabelList, eweightList, specificNodeIdList, this.props.enableForceDirected, \r\n                select_inspect_node, showSource, ForceDirectedWidth, ForceDirectedHeight);\r\n        } else {\r\n            let subg_name = subgList[extendedMode-4];\r\n            specificNodeIdList = subgs[subg_name][select_inspect_node].nodes;\r\n\r\n            graph_json = this.constructEdgeGraphJson(graph_object, model_nlabels, NLabelList, select_inspect_node, \r\n                subg_name, subgs, this.props.enableForceDirected, showSource, \r\n                ForceDirectedWidth, ForceDirectedHeight);\r\n        }\r\n        \r\n        // Store NeighborSet.\r\n        graph_json[\"NeighborSet\"] = NeighborSet;\r\n        \r\n        if(graph_json[\"success\"]){\r\n            // Store Graph Json.\r\n            //console.log(\"Store Graph Json.\")\r\n            //this.prevGraphJson = graph_json;\r\n\r\n            // Get node num.\r\n            let nodenum: number = graph_json[\"nodenum\"];\r\n\r\n            // Extended Options\r\n            let extendedOptions = [\r\n                [1,\"None\"],\r\n                [2,\"One Hop\"],\r\n                [3,\"Two Hop\"]];\r\n            \r\n            for (var subg_type_id = 0; subg_type_id < subgList.length; subg_type_id++) {\r\n                extendedOptions.push([subg_type_id + 4, subgList[subg_type_id]]);\r\n            }\r\n\r\n            // Event Handler for Starting or Stoping Layout.\r\n            let stopLayout = () =>{\r\n                this.onEnableForceDirected(false);\r\n            }\r\n            let startLayout = () =>{\r\n                this.onEnableForceDirected(true);\r\n            }\r\n\r\n            // If showSource is true, then it means that currently the user has selected a node in the graph view.\r\n\r\n            return (            \r\n            <div style={{width: \"100%\", height:\"\"+(this.props.height - 10)+\"px\", overflowX: \"hidden\"}}>\r\n                <div className=\"ViewTitle clearfix\">Graph View\r\n                    <div style={{float:'right'}}>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                    {/** Input Id */}\r\n                    {(showSource)?[<span key={\"span\"+1}>Id:</span>,\r\n                    <InputNumber min={0} max={nodenum} size=\"small\" value={select_inspect_node} onChange={(e:any)=> {this.onChangeSelectInspectNode(e,nodenum);}} />,\r\n                    <span key={\"span\"+3}>&nbsp;</span>,\r\n                    <Button size=\"small\" onClick={()=>{this.props.changeShowSource(false);this.props.changeExtendedMode(1);}}>X</Button> ]:[<span key={\"span\"+2}></span>]}\r\n                    {/** Setting Modal */}\r\n                    <GraphViewSettingsModalContainer />\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                    {/** Extended Selector */}\r\n                    Subgraph:&nbsp;\r\n                    <Select\r\n                        placeholder=\"Select an extended mode\"\r\n                        value={extendedMode}\r\n                        style={{ width: '120px' }}\r\n                        onChange={this.onExtendedModeChange}\r\n                        disabled={!showSource}\r\n                        size=\"small\"\r\n                    >\r\n                        {extendedOptions.map((d:any)=>(\r\n                            <Option value={d[0]} key={d[0]}>\r\n                                {d[1]}\r\n                            </Option>\r\n                        ))}\r\n                        </Select>\r\n                    {/** Force Directed Layout Enabler */}\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                    {(this.props.enableForceDirected)?\r\n                        <Button type=\"primary\" size=\"small\" onClick={stopLayout}>Stop Simulation</Button>:\r\n                        <Button type=\"default\" size=\"small\" onClick={startLayout}>Start Simulation</Button>}\r\n                    {/** Setting Modal Button */}\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                    <Button type=\"default\" size=\"small\" onClick={()=>{this.showGraphViewSettingModal()}} ><SettingOutlined /></Button>\r\n                    {/** Node Num Info */}\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                    #Nodes: <Tag>{getNodeStatisticStr(specificNodeIdList.length, nodenum)} </Tag>\r\n                    \r\n                    </div>\r\n                </div>\r\n                {/** Force Directed Graph */}\r\n                <div className=\"ViewBox\">\r\n                    <div\r\n                    style={{\r\n                        width: '100%',\r\n                        }}\r\n                    >\r\n                    <ForceDirectedGraphCanvasContainer graph_json={graph_json} \r\n                    width={ForceDirectedWidth} height={ForceDirectedHeight} \r\n                    onNodeClick={onNodeClick} UpdateCurrentGraphJson={UpdateCurrentGraphJson}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            )}else{\r\n                return <div />\r\n            }\r\n    }\r\n}\r\n\r\n","import GraphView from './GraphView'\r\nexport default GraphView;\r\n\r\n\r\n","import GraphView from '../components/DataRuns/GraphView/'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\nimport {changeSpecificNodeIdList, changeSelectInspectNode, changePrevGraphJson, \r\n    changeShowSource, changeExtendedMode, changeGraphViewSettingsModal_visible, changeEnableForceDirected} from '../actions';\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    selectedNodeIdList : state.selectedNodeIdList,\r\n    selectedMessagePassingNodeIdList: state.selectedMessagePassingNodeIdList,\r\n    showSource: state.showSource,\r\n    select_inspect_node: state.select_inspect_node,\r\n    extendedMode : state.extendedMode,\r\n    GraphViewSettingsModal_visible: state.GraphViewSettingsModal_visible,\r\n    enableForceDirected : state.enableForceDirected\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeSpecificNodeIdList:  (specificNodeIdList:any) => dispatch(changeSpecificNodeIdList(specificNodeIdList)),\r\n    changeSelectInspectNode : (select_inspect_node:number) => dispatch(changeSelectInspectNode(select_inspect_node)),\r\n    changePrevGraphJson: (prevGraphJson:any) => dispatch(changePrevGraphJson(prevGraphJson)),\r\n    changeShowSource: (showSource:boolean) => dispatch(changeShowSource(showSource)),\r\n    changeExtendedMode: (extendedMode:any) => dispatch(changeExtendedMode(extendedMode)),\r\n    changeGraphViewSettingsModal_visible: (visible:boolean) => dispatch(changeGraphViewSettingsModal_visible(visible)),\r\n    changeEnableForceDirected: (enableForceDirected: boolean) => dispatch(changeEnableForceDirected(enableForceDirected))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphView);\r\n\r\n\r\n\r\n","import axios from 'axios';\r\n\r\n// If enable, then it will load static data. Otherwise, it will load from remote backend.\r\n// Currently, it does not support remote backend mode. \r\nconst ENABLE_STATIC_JSON = false;\r\n// Remote Backend.\r\nconst URL = process.env.NODE_ENV === 'development'\r\n    ? 'http://localhost:7777'\r\n    : window.location.origin;\r\nconst axiosInstance1 = axios.create({\r\n    baseURL: `${URL}/api/`,\r\n    // timeout: 1000,\r\n    headers: {\r\n        'Access-Control-Allow-Origin': '*'\r\n    }\r\n});\r\n\r\n// Load Static Data.\r\nconst URL2 = window.location.origin;\r\nconst axiosInstance2 = axios.create({\r\n    baseURL: `${URL2}/data/`,\r\n    // timeout: 1000,\r\n    headers: {\r\n        'Access-Control-Allow-Origin': '*'\r\n    }\r\n});\r\n\r\nlet axiosInstance = (ENABLE_STATIC_JSON)?axiosInstance2:axiosInstance1;\r\n\r\n// Read graph dataset metainfo.\r\nexport async function getDatasetList(): Promise<any> {\r\n    let url = `/graphs`;\r\n    if(ENABLE_STATIC_JSON){\r\n        url = '/datasetlist.json'\r\n    }\r\n    //const params = { classifier_start, classifier_end };\r\n    const res = await axiosInstance.get(url);\r\n    if (res.status === 200) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\n\r\n// Read model metainfo.\r\nexport async function getModelList(dataset_id:number): Promise<any> {\r\n    let url = '/models'\r\n    let res;\r\n    if(ENABLE_STATIC_JSON){\r\n         url = '/cache_modellist_'+dataset_id+'.json'\r\n         res = await axiosInstance.get(url);\r\n    }else{\r\n         let params = { dataset_id };\r\n         res = await axiosInstance.get(url, {params});\r\n    }\r\n    \r\n    if (res.status === 200) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\n\r\n// Read subgraph metainfo.\r\nexport async function getSubgraphList(dataset_id:number): Promise<any> {\r\n    let url = '/subgraphs'\r\n    let res;\r\n    if(ENABLE_STATIC_JSON){\r\n        url = '/cache_subgraphlist_'+dataset_id+'.json';\r\n        res = await axiosInstance.get(url);\r\n    }else{\r\n        let params = { dataset_id };\r\n        res = await axiosInstance.get(url, {params});\r\n    }\r\n    if (res.status === 200) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\n\r\n// Read graph data.\r\nexport async function getGraphInfo(dataset_id:number): Promise<any> {\r\n    let url = '/graphinfo';\r\n    let res;\r\n    if(ENABLE_STATIC_JSON){\r\n        url = '/cache_graph_'+dataset_id+\".json\";\r\n        res = await axiosInstance.get(url);\r\n    }else{\r\n        let params = { dataset_id };\r\n        res = await axiosInstance.get(url, {params});\r\n    }\r\n    if (res.status === 200) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\n\r\n// Read model data.\r\nexport async function getModelInfo(dataset_id:number, model_id:number): Promise<any> {\r\n    let url = '/modelinfo';\r\n    let res;\r\n    if(ENABLE_STATIC_JSON){\r\n        url = '/cache_graph_'+dataset_id+\"_model_\"+model_id+\".json\";\r\n        res = await axiosInstance.get(url);\r\n    }else{\r\n        let params = { dataset_id, model_id };\r\n        res = await axiosInstance.get(url, {params});\r\n    }\r\n    if (res.status === 200) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\n\r\n// Read subgraph data.\r\nexport async function getSubgraphInfo(dataset_id:number, subgraph_id:number): Promise<any> {\r\n    let url = '/subgraphinfo';\r\n    let res;\r\n    if(ENABLE_STATIC_JSON){\r\n        url = 'cache_graph_'+dataset_id+\"_subgraph_\"+subgraph_id+\".json\";\r\n        res = await axiosInstance.get(url);\r\n    }else{\r\n        let params = { dataset_id, subgraph_id };\r\n        res = await axiosInstance.get(url, {params});\r\n    }\r\n    if (res.status === 200) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\n","import * as React from 'react';\r\nimport { Select, Row } from 'antd';\r\nimport { getDatasetList } from '../../../service/dataService';\r\nconst Option = Select.Option;\r\n\r\nexport interface DataSelectorProps {\r\n    dataset_id : number | null,  // dataset id\r\n    datasetList: any,   // dataset list\r\n    changeDataset: any,  // change dataset\r\n    clearIdInfo: any,    // clear id info\r\n    initDatasetList: any,  // initialize dataset list\r\n}\r\n\r\nexport interface DataSelectorState {\r\n}\r\n\r\nexport default class DataSelector extends React.Component<DataSelectorProps, DataSelectorState> {\r\n    constructor(props: DataSelectorProps) {\r\n        super(props);\r\n        this.onDatasetSelectorChange = this.onDatasetSelectorChange.bind(this);\r\n        this.state = {\r\n        };\r\n    }\r\n    // Initialize Dataset List.\r\n    componentDidMount(){\r\n        this.initDatasetList();\r\n    }\r\n    public async initDatasetList(){\r\n        const datasetList_package = await getDatasetList();\r\n        if(datasetList_package[\"success\"] === true){\r\n            this.props.initDatasetList(datasetList_package[\"datasets\"]);\r\n        }\r\n        \r\n    }\r\n    // Handling the event of changing data selector. \r\n    public onDatasetSelectorChange(value: number) {\r\n        this.props.changeDataset(value);\r\n        this.props.clearIdInfo();\r\n    }\r\n    public render() {        \r\n        let disabledDatasetSelector = this.props.datasetList.length <= 0;\r\n        return (\r\n                <Row>\r\n                        Graph:&nbsp;\r\n                        <Select\r\n                            placeholder=\"Select a dataset\"\r\n                            value={this.props.dataset_id  || undefined}\r\n                            style={{ width: '170px' }}\r\n                            onChange={this.onDatasetSelectorChange}\r\n                            disabled={disabledDatasetSelector}\r\n                        >\r\n                            {this.props.datasetList.map((d:any)=>(\r\n                                <Option value={d.id} key={d.id}>\r\n                                    {d.name}\r\n                                </Option>\r\n                            ))}\r\n                        </Select>\r\n                </Row>\r\n                \r\n            )\r\n            \r\n    }\r\n}","import DataSelector from '../components/DataRuns/ControlPanel/DataSelector';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport {changeDataset,initDatasetList, clearIdInfo} from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    dataset_id: state.dataset_id,\r\n    datasetList: state.datasetList\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeDataset: (dataset_id:number | null) => dispatch(changeDataset(dataset_id)),\r\n    clearIdInfo: () => dispatch(clearIdInfo()),\r\n    initDatasetList : (datasetList: any) => dispatch(initDatasetList(datasetList))\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DataSelector);\r\n","import * as React from 'react';\r\nimport { Select, Row } from 'antd';\r\nconst Option = Select.Option;\r\n\r\nexport interface IProps {\r\n    nlabel_options: any[], // nlabel options\r\n    changeNLabel: any   // change nlabel\r\n}\r\n\r\nexport interface IState {\r\n}\r\n\r\nexport default class NLabelSelector extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.onNLabelSelectorChange = this.onNLabelSelectorChange.bind(this);\r\n        this.state = {};\r\n    }\r\n    public onNLabelSelectorChange(value: any[]) {\r\n        this.props.changeNLabel(value);\r\n    }\r\n    public render() {    \r\n        let {nlabel_options} = this.props;\r\n        let disabledNLabelSelector = nlabel_options.length <= 0;\r\n        let nlabel_options_indexed = [];\r\n        for(let i = 0; i<nlabel_options.length; i++){\r\n            let nlabel_object:any = {\r\n                \"name\": nlabel_options[i],\r\n                \"id\": i\r\n            }\r\n            nlabel_options_indexed.push(nlabel_object);\r\n        }\r\n        return (\r\n                <Row>\r\n                    NLabel:&nbsp;\r\n                    <Select\r\n                        mode=\"multiple\"\r\n                        allowClear\r\n                        placeholder=\"Select nlabels\"\r\n                        style={{ width: '170px' }}\r\n                        onChange={this.onNLabelSelectorChange}\r\n                        disabled={disabledNLabelSelector}\r\n                        defaultValue={[]}\r\n                    >\r\n                        {nlabel_options_indexed.map((d:any)=>(\r\n                            <Option value={d.name} key={d.id}>{d.name}</Option>\r\n                        ))}\r\n                    </Select>\r\n                </Row>                \r\n            )\r\n    }\r\n}\r\n","import NLabelSelector from '../components/DataRuns/ControlPanel/NLabelSelector';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport {changeNLabel} from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    NLabelList: state.NLabelList\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeNLabel: (NLabelList: any | null) => dispatch(changeNLabel(NLabelList)),\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NLabelSelector);","import * as React from 'react';\r\nimport { Select, Row } from 'antd';\r\nconst Option = Select.Option;\r\n\r\nexport interface EWeightSelectorProps {\r\n    eweight_options: any[], // eweight options\r\n    changeEWeight: any,  // change eweight\r\n}\r\n\r\nexport interface EWeightSelectorState {\r\n}\r\n\r\nexport default class EWeightSelector extends React.Component<EWeightSelectorProps, EWeightSelectorState> {\r\n    constructor(props: EWeightSelectorProps) {\r\n        super(props);\r\n        this.onEWeightSelectorChange = this.onEWeightSelectorChange.bind(this);\r\n        this.state = {\r\n        };\r\n    }\r\n        \r\n    public onEWeightSelectorChange(value: any[]) {\r\n        this.props.changeEWeight(value);\r\n    }\r\n    public render() {        \r\n        let {eweight_options} = this.props;\r\n        let disabledEWeightSelector = eweight_options.length <= 0\r\n        let eweight_options_indexed = [];\r\n        for(let i = 0; i<eweight_options.length; i++){\r\n            let eweight_object:any = {\r\n                \"name\": eweight_options[i],\r\n                \"id\": i\r\n            }\r\n            eweight_options_indexed.push(eweight_object);\r\n        }\r\n        return (\r\n                <Row>\r\n                        EWeight:&nbsp;\r\n                        <Select\r\n                            allowClear\r\n                            placeholder=\"Select eweights\"\r\n                            style={{ width: '170px' }}\r\n                            onChange={this.onEWeightSelectorChange}\r\n                            disabled={disabledEWeightSelector}\r\n                        >\r\n                            {eweight_options_indexed.map((d:any)=>(\r\n                                <Option value={d.name} key={d.id}>{d.name}</Option>\r\n                            ))}\r\n                        </Select>\r\n                </Row>\r\n                \r\n            )\r\n            \r\n    }\r\n}","import EWeightSelector from '../components/DataRuns/ControlPanel/EWeightSelector';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport {changeEWeight} from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    eweightList: state.eweightList\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeEWeight: (eweightList: any | null) => dispatch(changeEWeight(eweightList)),\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EWeightSelector);\r\n","import './index.css';\r\nimport ControlPanel from './ControlPanel';\r\nexport default ControlPanel;","import * as React from 'react';\r\nimport {Row} from 'antd';\r\nimport DataSelectorContainer from '../../../container/DataSelectorContainer';\r\nimport NLabelSelectorContainer from '../../../container/NLabelSelectorContainer';\r\nimport EWeightSelectorContainer from '../../../container/EWeightSelectorContainer';\r\nexport interface ControlPanelProps {\r\n    nlabel_options:any[],\r\n    eweight_options:any[]\r\n}\r\n\r\nexport interface ControlPanelState {}\r\n\r\nexport default class ControlPanel extends React.Component<ControlPanelProps, ControlPanelState> {\r\n    constructor(props: ControlPanelProps) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n        };\r\n    }\r\n    public render() {\r\n        let {nlabel_options, eweight_options} = this.props;\r\n\r\n        // Generate NLabelSelector.\r\n        let generateNLabelSelector = (nlabel_options: any) => {\r\n            return <NLabelSelectorContainer nlabel_options={nlabel_options}/>\r\n        }\r\n\r\n        // Generate EWeightSelector.\r\n        let generateEWeightSelector = (eweight_options: any) => {\r\n            return <EWeightSelectorContainer eweight_options={eweight_options}/>\r\n        }\r\n\r\n        return (\r\n            <div>\r\n            <div className=\"ViewTitle\">Control Panel</div>\r\n            <div className=\"ViewBox\">\r\n                    <Row>\r\n                        <DataSelectorContainer />\r\n                    </Row>\r\n                    <Row>\r\n                        {generateNLabelSelector(nlabel_options)}\r\n                    </Row>\r\n                    <Row>\r\n                        {generateEWeightSelector(eweight_options)}\r\n                    </Row>\r\n            </div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n","import ControlPanel from '../components/DataRuns/ControlPanel'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\n\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    dataset_id : state.dataset_id\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlPanel);\r\n\r\n\r\n\r\n","import DataRuns from './DataRuns'\r\nexport default DataRuns;\r\n\r\n\r\n","\r\nimport './DataRuns.css'\r\nimport * as React from \"react\";\r\nimport GraphViewContainer from '../../container/GraphViewContainer';\r\nimport ControlPanelContainer from '../../container/ControlPanelContainer';\r\nimport { getGraphInfo, getModelList, getModelInfo, getSubgraphList, getSubgraphInfo } from '../../service/dataService';\r\nimport GridLayout from \"react-grid-layout\";\r\n\r\n\r\nexport interface IProps {\r\n    dataset_id : number | null,\r\n    contentWidth:number,\r\n    contentHeight:number,\r\n    NLabelList : any,\r\n    eweightList: any,\r\n    changeEnableForceDirected : any\r\n}\r\nexport interface IState {\r\n    graph_object : any,\r\n    model_list : any,\r\n    model_nlabels : any,\r\n    model_eweights: any,\r\n    model_nweights: any,\r\n    subg_list : any,\r\n    subgs : any,\r\n    layout_config: any,\r\n    screenWidth: number,\r\n    screenHeight: number\r\n}\r\n\r\nexport default class DataRuns extends React.Component<IProps, IState>{\r\n    public GraphViewRef:any;\r\n    public ControlPanelRef: any;\r\n    constructor(props:IProps) {\r\n        super(props);\r\n        this.onResizeStop = this.onResizeStop.bind(this);\r\n        this.getLayoutConfigWithName = this.getLayoutConfigWithName.bind(this);\r\n        this.getCurrentLayoutConfig = this.getCurrentLayoutConfig.bind(this);\r\n        this.GraphViewRef = React.createRef();\r\n        this.ControlPanelRef = React.createRef();\r\n        let m_to_eweights: Record<string, Array<number>> = {};\r\n        this.state = {\r\n            graph_object:{\r\n                model : -1,\r\n                graph : -1,  \r\n            },\r\n            model_list: null,\r\n            model_nlabels: null,\r\n            model_eweights: m_to_eweights,\r\n            model_nweights: null,\r\n            subg_list: [],\r\n            subgs: null,\r\n            layout_config: null,\r\n            screenWidth : 0,\r\n            screenHeight: 0\r\n        }\r\n        // show_mode_specification\r\n        // 1 -> graph_input\r\n        // 2 -> graph_target\r\n        // 3 -> graph_output\r\n        // 4 -> Explain_mode\r\n        // Explained_node, default for 0.\r\n\r\n        //this.resize.bind(this);\r\n        // Flow:\r\n        // 1. Constructor\r\n        // 2. componentWillMount()\r\n        // 3. render()\r\n        // 4. componentDidMount()\r\n        // If props update:\r\n        // 4.1 componentWillReceiveProps(nextProps : IProps), then goto 5.\r\n        // If States update\r\n        // 5. shouldComponentUpdate() if return false, then no rerendering.\r\n        // 6. if True, then componentWillUpdate\r\n        // 7. render()\r\n        // 8. componentDidUpdate\r\n        // If Unmount, then componentWillUnmount()\r\n    }\r\n\r\n\r\n     // When the view is mounted, it will be executed.\r\n     componentDidMount(){\r\n        //window.addEventListener('resize', this.onResize)\r\n         this.setState({\r\n             layout_config: this.getWholeLayoutConfig(),\r\n             screenHeight: window.innerHeight,\r\n             screenWidth: window.innerWidth\r\n         })\r\n     }\r\n     // Get graph data. \r\n     public async getGraphBundledData(dataset_id:number){\r\n         let data = await getGraphInfo(dataset_id);\r\n         let m_to_eweights: Record<string, Array<number>> = {};\r\n         if(data[\"success\"] === true){\r\n            data[\"graph_obj\"][\"bundle_id\"] = dataset_id;\r\n            for (var head in data[\"graph_obj\"][\"eweights\"]) {\r\n                let mname = \"Graph/\".concat(head);\r\n                m_to_eweights[mname] = data[\"graph_obj\"][\"eweights\"][head]\r\n            }\r\n            data[\"graph_obj\"][\"eweights\"] = m_to_eweights\r\n            this.setState({\r\n                graph_object: data[\"graph_obj\"]\r\n            })\r\n            this.props.changeEnableForceDirected(true);\r\n         }\r\n     }\r\n     // Get associated model list and model data.\r\n     public async getModelData(dataset_id:number){\r\n         let mlist = await getModelList(dataset_id);\r\n         if(mlist[\"success\"] === true){\r\n            let m_to_nlabels: Record<string, Array<number>> = {};\r\n            let m_to_eweights: Record<string, Array<number>> = {};\r\n            // let m_to_nweights: Record<string, Array<number>> = {};\r\n            for (var model_info of mlist[\"models\"]) {\r\n                let mdata = await getModelInfo(dataset_id, model_info[\"id\"]);\r\n                m_to_nlabels[mdata[\"model_obj\"][\"name\"]] = mdata[\"model_obj\"][\"nlabels\"];\r\n                // m_to_eweights[mdata[\"model_obj\"][\"name\"]] = mdata[\"model_obj\"][\"eweight\"];\r\n                // m_to_nweights[mdata[\"model_obj\"][\"name\"]] = mdata[\"model_obj\"][\"nweight\"];\r\n                for (var head in mdata[\"model_obj\"][\"eweights\"]) {\r\n                    let mname = mdata[\"model_obj\"][\"name\"].concat(\"/\");\r\n                    m_to_eweights[mname.concat(head)]= mdata[\"model_obj\"][\"eweights\"][head];\r\n                }\r\n            }\r\n            this.setState({\r\n                model_list: mlist[\"models\"],\r\n                model_nlabels: m_to_nlabels,\r\n                model_eweights: m_to_eweights, // TODO\r\n                // model_nweights: m_to_nweights// TODO\r\n            })\r\n         }\r\n     }\r\n     // Get associated subgraph list and subgraph data.\r\n     public async getSubgraphData(dataset_id:number){\r\n         let slist = await getSubgraphList(dataset_id);\r\n         if(slist[\"success\"] === true){\r\n             // Name to subgraphs\r\n             let n_to_subgs: Record<string, any> = {};\r\n             for (var subg_info of slist[\"subgraphs\"]) {\r\n                 let sdata = await getSubgraphInfo(dataset_id, subg_info[\"id\"]);\r\n                 n_to_subgs[sdata[\"name\"]] = sdata[\"node_subgraphs\"];\r\n             }\r\n             this.setState({\r\n                 subg_list: slist[\"subgraphs\"].map((d:any)=>(d[\"name\"])),\r\n                 subgs: n_to_subgs\r\n             })\r\n         }\r\n     }\r\n     // Get width and height from view name. \r\n     public getLayoutConfigWithName(name:string){\r\n         let width = 0;\r\n         let height = 0;\r\n         if(name === \"GraphView\"){\r\n             if(this.GraphViewRef){\r\n                 width = this.GraphViewRef.current.offsetWidth;\r\n                 height = this.GraphViewRef.current.offsetHeight;\r\n             }\r\n         }else if(name === \"ControlPanel\"){\r\n             if(this.ControlPanelRef){\r\n                 width = this.ControlPanelRef.current.offsetWidth;\r\n                 height = this.ControlPanelRef.current.offsetHeight;\r\n             }\r\n         }\r\n\r\n         return {\r\n             \"width\":width,\r\n             \"height\":height\r\n         }\r\n     }\r\n     // Get the whole layout config. \r\n     public getWholeLayoutConfig(){\r\n        let viewName = [\"GraphView\", \"ControlPanel\"]; \r\n        let layout_config:any = {};\r\n        viewName.forEach((d:any)=>{\r\n            layout_config[d] = this.getLayoutConfigWithName(d);\r\n        })\r\n        return layout_config;\r\n     }\r\n\r\n     // Get layout config from view name. \r\n     public getCurrentLayoutConfig(name:string){\r\n         let layout_config = this.state.layout_config;\r\n        if(layout_config){\r\n            if(layout_config[name]){\r\n                return layout_config[name];\r\n            }else{\r\n                return null;\r\n            }\r\n        }else{\r\n            return null;\r\n        }\r\n     }\r\n\r\n     // Handling the changing of states or props.\r\n     componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n        //console.log('Component did update!')\r\n        // If the dataset_id has been changed. \r\n        if(prevProps.dataset_id !== this.props.dataset_id){\r\n            // If the id is valid. \r\n            if( this.props.dataset_id  && this.props.dataset_id>=0){\r\n                // Get the graph data. \r\n                this.getGraphBundledData(this.props.dataset_id);\r\n                // Get the model data associated with the graph.\r\n                this.getModelData(this.props.dataset_id);\r\n                // Get the subgraph data associated with the graph.\r\n                this.getSubgraphData(this.props.dataset_id);\r\n            }else{\r\n                // Set to a dummy case.\r\n                this.setState({\r\n                    graph_object:{\r\n                        model : -1,\r\n                        graph : -1,  \r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        // If the window is resized, update the layout config. \r\n        if(prevProps.contentHeight!==this.props.contentHeight\r\n            || prevProps.contentWidth !== this.props.contentWidth){\r\n                this.setState({\r\n                    layout_config: this.getWholeLayoutConfig()\r\n                })\r\n            }   \r\n     }\r\n\r\n    // RESERVED: handling the layout change.\r\n    public onLayoutChange(layout:any){}\r\n    // For react-grid-layout, when the resizing is fixed, the layout configuration should be updated.\r\n    public onResizeStop(layout:any){\r\n        console.log(\"onResizeStop\", layout);\r\n        console.log(\"Layout\", this.getWholeLayoutConfig());\r\n        this.setState({\r\n            layout_config : this.getWholeLayoutConfig()\r\n        })\r\n        //var width = document.getElementById('a').offsetWidth;\r\n    }\r\n    public render() {\r\n        // Rendering.\r\n        let {graph_object} = this.state;\r\n        let dataset_id = -1;\r\n        if(graph_object.bundle_id){\r\n            dataset_id = graph_object.bundle_id;\r\n        }\r\n        \r\n        // Generate Graph View.\r\n        let generateGraphView = (graph_object: any, model_nlabels: any, model_eweights: any, model_nweights: any, \r\n            subgs: any, NLabelList: any, eweightList: any, subgList: any, width:number, height:number) => {\r\n            return <GraphViewContainer graph_object={graph_object} \r\n                model_nlabels={model_nlabels}\r\n                model_eweights={model_eweights}\r\n                model_nweights={model_nweights}\r\n                subgs={subgs}\r\n                NLabelList={NLabelList}\r\n                eweightList={eweightList}\r\n                subgList={subgList}\r\n                width={width}\r\n                height={height}\r\n                />\r\n        }\r\n        // Generate Control Panel\r\n        let generateControlPanel = (dataset_id: number, graph_object: any, model_nlabels: any, model_eweights: any) => {\r\n            // TODO: nlabels may not exist\r\n            let nlabel_options: any[] = [];\r\n            let eweight_options: any[] = [];\r\n            if (dataset_id >= 0) {\r\n                if (graph_object.nlabels.length !== 0) {\r\n                    nlabel_options.push(\"ground_truth\");\r\n                }\r\n                if (model_nlabels !== null) {\r\n                    nlabel_options = nlabel_options.concat(Object.keys(model_nlabels));\r\n                    // console.log(\"model_eweights\",model_eweights);\r\n                    // console.log(\"Object.keys(model_eweights)\",Object.keys(model_eweights[\"GCN\"]));\r\n                    // eweight_options = Object.keys(model_eweights);\r\n                }\r\n                eweight_options = Object.keys(graph_object.eweights);\r\n                if (model_eweights !== null) {\r\n                    eweight_options = eweight_options.concat(Object.keys(model_eweights));\r\n                }\r\n            }\r\n            // return <ControlPanelContainer nlabel_options={nlabel_options}/>\r\n            return <ControlPanelContainer nlabel_options={nlabel_options} eweight_options={eweight_options}/>\r\n        }\r\n        \r\n        // layout is an array of objects, see the demo for more complete usage\r\n        let enableStatic = true;  // If enabled static, the layout cannot be manually configured.\r\n        let max_row_num = Math.floor(this.props.contentHeight / 40); // Maximum rows in the screen.\r\n        // small width, height: 1707 724\r\n        // big width, height: 2560 1175\r\n        let ControlPanelH = max_row_num;\r\n        let GraphViewPanelH = max_row_num;\r\n        \r\n        let layout = [\r\n            {i: 'b', x: 5, y: 0, w: 19, h: GraphViewPanelH, static:enableStatic}, // Graph View\r\n            {i: 'd', x: 0, y: 0, w: 5, h: ControlPanelH, static:enableStatic}  // Control Panel\r\n        ];\r\n        \r\n\r\n        // Generate Whole Layout.\r\n        let generateWholeView = () =>{\r\n            let screenwidth = window.innerWidth;\r\n            //let screenheight = window.innerHeight;\r\n\r\n            \r\n            return <div><GridLayout className=\"layout\" layout={layout} \r\n                cols={24} rowHeight={30} width={screenwidth} onLayoutChange={this.onLayoutChange}\r\n                onResizeStop={this.onResizeStop}>\r\n                    <div className=\"PanelBox\" key=\"b\" ref={this.GraphViewRef}>\r\n                    {(dataset_id>=0 && this.getCurrentLayoutConfig(\"GraphView\"))?generateGraphView(graph_object, \r\n                    this.state.model_nlabels, this.state.model_eweights, this.state.model_nweights, this.state.subgs, \r\n                    this.props.NLabelList, this.props.eweightList, this.state.subg_list,\r\n                    this.getCurrentLayoutConfig(\"GraphView\")[\"width\"], \r\n                    this.getCurrentLayoutConfig(\"GraphView\")[\"height\"]):<div />}\r\n                    </div>\r\n                    <div className=\"PanelBox\" key=\"d\" ref={this.ControlPanelRef}>\r\n                        {generateControlPanel(dataset_id, graph_object, this.state.model_nlabels, this.state.model_eweights)}\r\n                    </div>\r\n                </GridLayout>\r\n                \r\n                </div>\r\n        }\r\n        \r\n        return generateWholeView();\r\n    }\r\n}\r\n\r\n","import DataRuns from '../components/DataRuns'\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\n//import { decrement, increment } from '../actions';\r\nimport { StoreState } from '../types';\r\nimport {changeEnableForceDirected} from '../actions';\r\n\r\n// 将 reducer 中的状态插入到组件的 props 中\r\nconst mapStateToProps = (state: StoreState) => ({\r\n    dataset_id : state.dataset_id,\r\n    NLabelList : state.NLabelList,\r\n    eweightList: state.eweightList\r\n})\r\n\r\n// 将 对应action 插入到组件的 props 中\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    changeEnableForceDirected: (enableForceDirected: boolean) => dispatch(changeEnableForceDirected(enableForceDirected))\r\n\r\n})\r\n\r\n// 使用 connect 高阶组件对 Counter 进行包裹\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DataRuns);\r\n\r\n\r\n\r\n","import { Col, Layout, Row } from 'antd';\r\n\r\nimport React from 'react';\r\nimport logo from './logo2.png';\r\nimport './App.css';\r\nimport DataRunsContainer from '../container/DataRunsContainer';\r\n// import DataView from \"./DataView\";\r\n//import SidePanel from '../components/SidePanel';\r\nconst { Content, Header } = Layout;\r\nexport interface IProps{\r\n\r\n}\r\nexport interface IState {\r\n    contentWidth:number,\r\n    contentHeight:number,\r\n    screenWidth:number,\r\n    screenHeight:number\r\n}\r\nclass App extends React.Component<IProps, IState> {\r\n  public ContentRef:any;\r\n  constructor(props:IProps) {\r\n      super(props);\r\n      this.ContentRef = React.createRef();\r\n      this.onResize = this.onResize.bind(this);\r\n      this.state = {\r\n          contentWidth : 0,\r\n          contentHeight: 0,\r\n          screenHeight: 0,\r\n          screenWidth :0\r\n      }\r\n\r\n  }\r\n  public getLayoutConfig(){\r\n    let contentWidth:number = 0;\r\n    let contentHeight:number = 0;\r\n    if(this.ContentRef){\r\n      contentWidth = this.ContentRef.current.offsetWidth;\r\n      contentHeight = this.ContentRef.current.offsetHeight;\r\n    }\r\n    return {\r\n      contentWidth:contentWidth, \r\n      contentHeight:contentHeight\r\n    }\r\n  }\r\n  public onResize(){\r\n    this.updateLayoutState();\r\n }  \r\n public updateLayoutState(){\r\n    let contentLayout = this.getLayoutConfig();\r\n    let contentWidth = contentLayout.contentWidth;\r\n    let contentHeight = contentLayout.contentHeight;\r\n    //console.log(\"contentWidth, height\", contentWidth, contentHeight)\r\n   this.setState({\r\n      contentWidth:contentWidth,\r\n      contentHeight:contentHeight,\r\n       screenHeight: window.innerHeight,\r\n       screenWidth: window.innerWidth\r\n   })\r\n }\r\n componentDidMount(){\r\n    window.addEventListener('resize', this.onResize)\r\n    this.updateLayoutState();\r\n }\r\n componentDidUpdate(prevProps:IProps, prevState:IState) {\r\n  // if(prevState.contentWidth!==this.state.contentWidth || )\r\n  //this.updateLayoutState();\r\n }\r\n  public render() {\r\n    let {screenWidth, screenHeight, contentWidth, contentHeight} = this.state;\r\n    return (\r\n      <Layout className=\"app\" >\r\n          <Header className='appHeader'>\r\n          GNNVis\r\n                  <img src={logo} className='appLogo' alt-text=\"logo\"/>\r\n          </Header>\r\n          <Content className='appContent' >\r\n              <div style={{ \"height\": \"100%\", \"width\":\"100%\" }} ref={this.ContentRef}>\r\n                {(contentWidth>0 && contentHeight >0)?<DataRunsContainer contentWidth={contentWidth} contentHeight={contentHeight}/>:<div />}\r\n              </div>\r\n              <div id=\"tooltip_proj\" />\r\n              <div id=\"tooltip_matrix\" />\r\n          </Content>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { DATASET_ID_CHANGE, INIT_DATASET_LIST,  SELECTED_NODE_ID_LIST_CHANGE,\r\n   SHOW_SOURCE_CHANGE,SPECIFIC_NODE_ID_LIST_CHANGE, SELECT_INSPECT_NODE_CHANGE,CLEAR_ID_INFO, PREV_GRAPH_JSON_CHANGE,\r\n GRAPHVIEWSTATE_CHANGE, GRAPHVIEWSETTINGMODAL_VISIBLE_CHANGE, EXTENDED_MODE_CHANGE, \r\n NLABEL_CHANGE, EWEIGHT_CHANGE, ENABLE_FORCE_DIRECTED_CHANGE} from '../constants';\r\nimport {StoreState} from '../types';\r\nconst initial_state : StoreState = {\r\n    dataset_id : null,\r\n    refreshnumber: 0,\r\n    showSource: false,\r\n    datasetList: [],\r\n    filters: {},\r\n    selectedNodeIdList: [],\r\n    selectedMessagePassingNodeIdList: [],\r\n    specificNodeIdList: [],\r\n    select_inspect_node : 0,\r\n    prevGraphJson: null,\r\n    extendedMode:1,\r\n    GraphViewSettingsModal_visible:false,\r\n    GraphViewState:{\r\n      DisplayUnfocusedNodes:false,\r\n      DisplayOverview:true\r\n    },\r\n    // model: null,\r\n    NLabelList: [],\r\n    // eweight_id: null,\r\n    eweightList: [],\r\n    enableForceDirected: true\r\n}\r\n// 处理并返回 state \r\nexport default (state = initial_state, action:any): StoreState => {\r\n   \r\n    switch (action.type) {\r\n      case DATASET_ID_CHANGE:\r\n        // Change dataset id\r\n        return {\r\n          ...state,\r\n          dataset_id: action.dataset_id,\r\n        };\r\n      case INIT_DATASET_LIST:\r\n        // init dataset list\r\n        return {\r\n          ...state,\r\n          datasetList: action.datasetList\r\n        };\r\n      case NLABEL_CHANGE:\r\n        // Change NLabelList\r\n        return {\r\n          ...state,\r\n          NLabelList: action.NLabelList\r\n        }\r\n      case EWEIGHT_CHANGE:\r\n        // Change eweightList\r\n        return {\r\n          ...state,\r\n          eweightList: action.eweightList\r\n        }        \r\n      case SELECTED_NODE_ID_LIST_CHANGE:\r\n        //console.log(\"selectedNodeIdList Store State Change\",action.selectedNodeIdList);\r\n        return {\r\n          ...state,\r\n          selectedNodeIdList: action.selectedNodeIdList\r\n        }\r\n      case SHOW_SOURCE_CHANGE:\r\n        return {\r\n          ...state,\r\n          showSource: action.showSource\r\n        }\r\n      case SPECIFIC_NODE_ID_LIST_CHANGE:\r\n        //console.log(\"SpecificNodeIdListChange\",  action.specificNodeIdList);\r\n        return {\r\n          ...state,\r\n          specificNodeIdList: action.specificNodeIdList\r\n        }\r\n      case SELECT_INSPECT_NODE_CHANGE:\r\n        //console.log(\"Select inspect node change\", action.select_inspect_node);\r\n        return {\r\n          ...state,\r\n          select_inspect_node: action.select_inspect_node\r\n        }\r\n      case CLEAR_ID_INFO:\r\n        return {\r\n          ...state,\r\n          filters: {},\r\n          selectedNodeIdList: [],\r\n          selectedMessagePassingNodeIdList: [],\r\n          specificNodeIdList: [],\r\n          select_inspect_node : 0\r\n        }\r\n      case PREV_GRAPH_JSON_CHANGE:\r\n        return {\r\n          ...state,\r\n          prevGraphJson: action.prevGraphJson\r\n        }\r\n      case GRAPHVIEWSETTINGMODAL_VISIBLE_CHANGE:\r\n        return {\r\n          ...state,\r\n          GraphViewSettingsModal_visible: action.GraphViewSettingsModal_visible\r\n        }\r\n      case GRAPHVIEWSTATE_CHANGE:\r\n        return {\r\n          ...state,\r\n          GraphViewState: action.GraphViewState\r\n        }\r\n      case EXTENDED_MODE_CHANGE:\r\n          return {\r\n            ...state,\r\n            extendedMode: action.extendedMode\r\n          }\r\n      case ENABLE_FORCE_DIRECTED_CHANGE:\r\n          return {\r\n            ...state,\r\n            enableForceDirected: action.enableForceDirected\r\n          }\r\n      default:\r\n        return state\r\n    }\r\n}\r\n\r\n\r\n//import { DECREMENT, INCREMENT } from '../constants';\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport reducer from './reducer'; \r\nimport \"./react_grid_layout_style.css\"\r\nimport \"./react_resizable_styles.css\"\r\n// 1、创建 store\r\nconst store = createStore(reducer);\r\n\r\nReactDOM.render(// 2、然后使用react-redux的Provider将props与容器连通起来\r\n    <Provider store={ store }>\r\n        <App />\r\n    </Provider> \r\n    , document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}